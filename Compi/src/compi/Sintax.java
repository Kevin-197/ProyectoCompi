
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 06 23:18:08 CST 2022
//----------------------------------------------------

package compi;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 06 23:18:08 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\040\006\000\002\040" +
    "\007\000\002\040\004\000\002\040\003\000\002\040\005" +
    "\000\002\040\005\000\002\041\006\000\002\041\007\000" +
    "\002\041\004\000\002\041\005\000\002\041\006\000\002" +
    "\041\003\000\002\041\003\000\002\041\005\000\002\041" +
    "\005\000\002\002\012\000\002\002\012\000\002\002\013" +
    "\000\002\002\013\000\002\003\004\000\002\003\003\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\007\000\002\003\006\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\004\000" +
    "\002\004\006\000\002\004\002\000\002\026\005\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\004\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\007\000\002\016\005\000\002\016\006\000\002" +
    "\016\006\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\006\000\002\022\004\000" +
    "\002\022\003\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\006\000\002\022" +
    "\005\000\002\023\005\000\002\023\003\000\002\035\006" +
    "\000\002\035\007\000\002\036\007\000\002\024\011\000" +
    "\002\031\003\000\002\031\005\000\002\031\005\000\002" +
    "\025\015\000\002\027\011\000\002\030\013\000\002\034" +
    "\011\000\002\032\010\000\002\032\007\000\002\042\011" +
    "\000\002\043\007\000\002\043\006\000\002\043\006\000" +
    "\002\043\005\000\002\043\004\000\002\043\004\000\002" +
    "\044\005\000\002\044\003\000\002\045\005\000\002\045" +
    "\003\000\002\046\005\000\002\046\006\000\002\046\004" +
    "\000\002\046\003\000\002\046\004\000\002\046\003\000" +
    "\002\033\003\000\002\033\005\000\002\037\003\000\002" +
    "\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\022\003\015\004\013\011\012\012\005\021" +
    "\006\022\014\024\004\026\016\001\002\000\010\012\uffb3" +
    "\021\u0123\065\uffb3\001\002\000\012\011\012\021\006\022" +
    "\014\024\004\001\002\000\006\012\uffb5\065\uffb5\001\002" +
    "\000\006\012\220\065\u0118\001\002\000\022\003\015\004" +
    "\013\011\012\012\005\021\006\022\014\024\004\026\016" +
    "\001\002\000\004\002\u0116\001\002\000\006\012\uffb6\065" +
    "\uffb6\001\002\000\004\065\u0111\001\002\000\010\012\uffb4" +
    "\021\u0110\065\uffb4\001\002\000\006\060\u010c\062\u010d\001" +
    "\002\000\004\065\020\001\002\000\004\002\ufffd\001\002" +
    "\000\004\055\021\001\002\000\016\011\012\021\006\022" +
    "\014\024\004\056\uffd0\061\uffd0\001\002\000\004\065\u010b" +
    "\001\002\000\006\056\024\061\025\001\002\000\004\057" +
    "\030\001\002\000\012\011\012\021\006\022\014\024\004" +
    "\001\002\000\004\065\027\001\002\000\006\056\uffd1\061" +
    "\uffd1\001\002\000\066\003\057\004\041\005\077\006\044" +
    "\007\043\011\012\012\005\013\066\015\064\017\056\020" +
    "\033\021\006\022\014\023\051\024\004\025\060\027\052" +
    "\030\075\031\061\042\037\043\047\052\062\055\076\064" +
    "\053\065\074\066\071\001\002\000\072\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\042\uffe0\043" +
    "\uffe0\052\uffe0\055\uffe0\060\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\001\002\000\046\002\uff95\003\uff95\004\uff95\011\uff95\012" +
    "\uff95\021\uff95\022\uff95\024\uff95\026\uff95\044\130\045\131" +
    "\046\133\047\126\050\127\051\134\056\uff95\061\uff95\062" +
    "\uff95\001\002\000\004\055\u0101\001\002\000\064\002\uffa3" +
    "\003\uffa3\004\uffa3\011\uffa3\012\uffa3\021\uffa3\022\uffa3\024" +
    "\uffa3\026\uffa3\030\uffa3\031\uffa3\032\144\033\142\034\145" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\053" +
    "\uffa3\054\uffa3\056\uffa3\061\uffa3\062\uffa3\001\002\000\064" +
    "\002\uff9d\003\uff9d\004\uff9d\011\uff9d\012\uff9d\021\uff9d\022" +
    "\uff9d\024\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\053\uff9d\054\uff9d\056\uff9d\061\uff9d\062\uff9d\001\002" +
    "\000\056\002\uffa5\003\uffa5\004\uffa5\011\uffa5\012\uffa5\021" +
    "\uffa5\022\uffa5\024\uffa5\026\uffa5\030\136\031\140\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5\054" +
    "\uffa5\056\uffa5\061\uffa5\062\uffa5\001\002\000\004\065\u0100" +
    "\001\002\000\066\004\164\005\077\006\044\007\043\011" +
    "\012\012\005\013\066\015\064\017\056\020\033\021\006" +
    "\022\014\023\051\024\004\025\060\027\052\030\075\031" +
    "\061\042\037\043\047\052\062\055\076\060\360\064\053" +
    "\065\074\066\071\001\002\000\004\065\355\001\002\000" +
    "\072\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda\030\uffda" +
    "\031\uffda\042\uffda\043\uffda\052\uffda\055\uffda\060\uffda\064" +
    "\uffda\065\uffda\066\uffda\001\002\000\004\062\354\001\002" +
    "\000\004\055\342\001\002\000\072\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\042\uffe4\043\uffe4" +
    "\052\uffe4\055\uffe4\060\uffe4\064\uffe4\065\uffe4\066\uffe4\001" +
    "\002\000\072\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\042\uffe8\043\uffe8\052\uffe8\055\uffe8\060" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\001\002\000\004\065\341" +
    "\001\002\000\072\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\042\uffdc\043\uffdc\052\uffdc\055\uffdc" +
    "\060\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\026\030" +
    "\075\031\061\042\037\043\047\052\062\055\076\062\336" +
    "\064\053\065\074\066\071\001\002\000\004\055\330\001" +
    "\002\000\064\002\uffaf\003\uffaf\004\uffaf\011\uffaf\012\uffaf" +
    "\021\uffaf\022\uffaf\024\uffaf\026\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\053\uffaf\054\uffaf\056\uffaf\061\uffaf\062" +
    "\uffaf\001\002\000\072\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\042\uffe2\043\uffe2\052\uffe2\055" +
    "\uffe2\060\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002\000\064" +
    "\002\uffa1\003\uffa1\004\uffa1\011\uffa1\012\uffa1\021\uffa1\022" +
    "\uffa1\024\uffa1\026\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\053\uffa1\054\uffa1\056\uffa1\061\uffa1\062\uffa1\001\002" +
    "\000\004\055\307\001\002\000\010\056\305\060\304\062" +
    "\306\001\002\000\004\055\234\001\002\000\012\055\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\001\002\000\012\055\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\001\002\000\006\012\220\065\222" +
    "\001\002\000\004\057\160\001\002\000\072\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\042\uffd8" +
    "\043\uffd8\052\uffd8\055\uffd8\060\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\001\002\000\004\062\157\001\002\000\072\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\027\uffec\030\uffec\031\uffec\042" +
    "\uffec\043\uffec\052\uffec\055\uffec\060\uffec\064\uffec\065\uffec" +
    "\066\uffec\001\002\000\012\055\152\064\053\065\153\066" +
    "\071\001\002\000\064\002\uffb0\003\uffb0\004\uffb0\011\uffb0" +
    "\012\uffb0\021\uffb0\022\uffb0\024\uffb0\026\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\056\uffb0\061" +
    "\uffb0\062\uffb0\001\002\000\072\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\030\uffe6\031\uffe6\042\uffe6\043\uffe6\052" +
    "\uffe6\055\uffe6\060\uffe6\064\uffe6\065\uffe6\066\uffe6\001\002" +
    "\000\072\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027\uffde\030" +
    "\uffde\031\uffde\042\uffde\043\uffde\052\uffde\055\uffde\060\uffde" +
    "\064\uffde\065\uffde\066\uffde\001\002\000\100\002\uffae\003" +
    "\uffae\004\uffae\011\uffae\012\uffae\021\uffae\022\uffae\024\uffae" +
    "\026\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\121\036\120\037\123\040\116\041\113\042\114\043\115" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\055" +
    "\117\056\uffae\061\uffae\062\uffae\001\002\000\012\055\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\001\002\000\024\030\075\031" +
    "\061\042\037\043\047\052\062\055\076\064\053\065\074" +
    "\066\071\001\002\000\004\055\102\001\002\000\004\062" +
    "\101\001\002\000\072\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\027\uffea\030\uffea\031\uffea\042\uffea\043\uffea\052\uffea\055" +
    "\uffea\060\uffea\064\uffea\065\uffea\066\uffea\001\002\000\024" +
    "\030\075\031\061\042\037\043\047\052\062\055\076\064" +
    "\053\065\074\066\071\001\002\000\006\056\105\061\106" +
    "\001\002\000\006\056\uff76\061\uff76\001\002\000\004\062" +
    "\110\001\002\000\024\030\075\031\061\042\037\043\047" +
    "\052\062\055\076\064\053\065\074\066\071\001\002\000" +
    "\006\056\uff75\061\uff75\001\002\000\072\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\027\uff92\030\uff92\031\uff92\042\uff92\043" +
    "\uff92\052\uff92\055\uff92\060\uff92\064\uff92\065\uff92\066\uff92" +
    "\001\002\000\004\056\112\001\002\000\064\002\uffa0\003" +
    "\uffa0\004\uffa0\011\uffa0\012\uffa0\021\uffa0\022\uffa0\024\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0" +
    "\054\uffa0\056\uffa0\061\uffa0\062\uffa0\001\002\000\024\030" +
    "\uffbb\031\uffbb\042\uffbb\043\uffbb\052\uffbb\055\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\064\002\uff99\003\uff99\004" +
    "\uff99\011\uff99\012\uff99\021\uff99\022\uff99\024\uff99\026\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\053\uff99\054\uff99" +
    "\056\uff99\061\uff99\062\uff99\001\002\000\064\002\uff9a\003" +
    "\uff9a\004\uff9a\011\uff9a\012\uff9a\021\uff9a\022\uff9a\024\uff9a" +
    "\026\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a" +
    "\054\uff9a\056\uff9a\061\uff9a\062\uff9a\001\002\000\024\030" +
    "\uffb7\031\uffb7\042\uffb7\043\uffb7\052\uffb7\055\uffb7\064\uffb7" +
    "\065\uffb7\066\uffb7\001\002\000\026\030\075\031\061\042" +
    "\037\043\047\052\062\055\076\056\147\064\053\065\074" +
    "\066\071\001\002\000\024\030\uffb9\031\uffb9\042\uffb9\043" +
    "\uffb9\052\uffb9\055\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002" +
    "\000\024\030\uffba\031\uffba\042\uffba\043\uffba\052\uffba\055" +
    "\uffba\064\uffba\065\uffba\066\uffba\001\002\000\024\030\075" +
    "\031\061\042\037\043\047\052\062\055\076\064\053\065" +
    "\125\066\071\001\002\000\024\030\uffb8\031\uffb8\042\uffb8" +
    "\043\uffb8\052\uffb8\055\uffb8\064\uffb8\065\uffb8\066\uffb8\001" +
    "\002\000\046\002\uff96\003\uff96\004\uff96\011\uff96\012\uff96" +
    "\021\uff96\022\uff96\024\uff96\026\uff96\044\130\045\131\046" +
    "\133\047\126\050\127\051\134\056\uff96\061\uff96\062\uff96" +
    "\001\002\000\072\002\uffae\003\uffae\004\uffae\011\uffae\012" +
    "\uffae\021\uffae\022\uffae\024\uffae\026\uffae\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\042\114\043\115\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae\054\uffae" +
    "\055\117\056\uffae\061\uffae\062\uffae\001\002\000\024\030" +
    "\uffc0\031\uffc0\042\uffc0\043\uffc0\052\uffc0\055\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\001\002\000\024\030\uffbf\031\uffbf\042" +
    "\uffbf\043\uffbf\052\uffbf\055\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\001\002\000\024\030\uffc3\031\uffc3\042\uffc3\043\uffc3\052" +
    "\uffc3\055\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\024" +
    "\030\uffc2\031\uffc2\042\uffc2\043\uffc2\052\uffc2\055\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\001\002\000\024\030\075\031\061" +
    "\042\037\043\047\052\062\055\076\064\053\065\125\066" +
    "\071\001\002\000\024\030\uffc1\031\uffc1\042\uffc1\043\uffc1" +
    "\052\uffc1\055\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000" +
    "\024\030\uffbe\031\uffbe\042\uffbe\043\uffbe\052\uffbe\055\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\001\002\000\056\002\uffa6\003" +
    "\uffa6\004\uffa6\011\uffa6\012\uffa6\021\uffa6\022\uffa6\024\uffa6" +
    "\026\uffa6\030\136\031\140\044\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\056\uffa6\061\uffa6" +
    "\062\uffa6\001\002\000\024\030\uffc8\031\uffc8\042\uffc8\043" +
    "\uffc8\052\uffc8\055\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002" +
    "\000\024\030\075\031\061\042\037\043\047\052\062\055" +
    "\076\064\053\065\125\066\071\001\002\000\024\030\uffc7" +
    "\031\uffc7\042\uffc7\043\uffc7\052\uffc7\055\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\001\002\000\064\002\uffa4\003\uffa4\004\uffa4" +
    "\011\uffa4\012\uffa4\021\uffa4\022\uffa4\024\uffa4\026\uffa4\030" +
    "\uffa4\031\uffa4\032\144\033\142\034\145\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4\056" +
    "\uffa4\061\uffa4\062\uffa4\001\002\000\024\030\uffca\031\uffca" +
    "\042\uffca\043\uffca\052\uffca\055\uffca\064\uffca\065\uffca\066" +
    "\uffca\001\002\000\024\030\075\031\061\042\037\043\047" +
    "\052\062\055\076\064\053\065\125\066\071\001\002\000" +
    "\024\030\uffcb\031\uffcb\042\uffcb\043\uffcb\052\uffcb\055\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\001\002\000\024\030\uffc9\031" +
    "\uffc9\042\uffc9\043\uffc9\052\uffc9\055\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\001\002\000\064\002\uffa2\003\uffa2\004\uffa2\011" +
    "\uffa2\012\uffa2\021\uffa2\022\uffa2\024\uffa2\026\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2\056\uffa2" +
    "\061\uffa2\062\uffa2\001\002\000\064\002\uff97\003\uff97\004" +
    "\uff97\011\uff97\012\uff97\021\uff97\022\uff97\024\uff97\026\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\051\uff97\053\uff97\054\uff97" +
    "\056\uff97\061\uff97\062\uff97\001\002\000\006\056\151\061" +
    "\106\001\002\000\064\002\uff98\003\uff98\004\uff98\011\uff98" +
    "\012\uff98\021\uff98\022\uff98\024\uff98\026\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\053\uff98\054\uff98\056\uff98\061" +
    "\uff98\062\uff98\001\002\000\024\030\075\031\061\042\037" +
    "\043\047\052\062\055\076\064\053\065\074\066\071\001" +
    "\002\000\064\002\uffae\003\uffae\004\uffae\011\uffae\012\uffae" +
    "\021\uffae\022\uffae\024\uffae\026\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\053\uffae\054\uffae\056\uffae\061\uffae\062" +
    "\uffae\001\002\000\064\002\uff9e\003\uff9e\004\uff9e\011\uff9e" +
    "\012\uff9e\021\uff9e\022\uff9e\024\uff9e\026\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\056\uff9e\061" +
    "\uff9e\062\uff9e\001\002\000\004\056\156\001\002\000\064" +
    "\002\uff9f\003\uff9f\004\uff9f\011\uff9f\012\uff9f\021\uff9f\022" +
    "\uff9f\024\uff9f\026\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\053\uff9f\054\uff9f\056\uff9f\061\uff9f\062\uff9f\001\002" +
    "\000\072\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\042\uffcc\043\uffcc\052\uffcc\055\uffcc\060\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\001\002\000\066\003\057\004" +
    "\041\005\077\006\044\007\043\011\012\012\005\013\066" +
    "\015\064\017\056\020\033\021\006\022\014\023\051\024" +
    "\004\025\060\027\052\030\075\031\061\042\037\043\047" +
    "\052\062\055\076\064\053\065\074\066\071\001\002\000" +
    "\066\004\164\005\077\006\044\007\043\011\012\012\005" +
    "\013\066\015\064\017\056\020\033\021\006\022\014\023" +
    "\051\024\004\025\060\027\052\030\075\031\061\042\037" +
    "\043\047\052\062\055\076\060\163\064\053\065\074\066" +
    "\071\001\002\000\072\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\042\uffe1\043\uffe1\052\uffe1\055" +
    "\uffe1\060\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000\004" +
    "\027\203\001\002\000\004\065\200\001\002\000\072\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\042\uffdb\043\uffdb\052\uffdb\055\uffdb\060\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\001\002\000\072\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\030\uffe5\031\uffe5\042\uffe5\043\uffe5\052" +
    "\uffe5\055\uffe5\060\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002" +
    "\000\072\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\042\uffe9\043\uffe9\052\uffe9\055\uffe9\060\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\001\002\000\072\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\042\uffdd" +
    "\043\uffdd\052\uffdd\055\uffdd\060\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\001\002\000\072\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\042\uffe3\043\uffe3\052\uffe3\055" +
    "\uffe3\060\uffe3\064\uffe3\065\uffe3\066\uffe3\001\002\000\072" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\042\uffd9\043\uffd9\052\uffd9\055\uffd9\060\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\072\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\027\uffed\030\uffed\031\uffed\042\uffed\043\uffed" +
    "\052\uffed\055\uffed\060\uffed\064\uffed\065\uffed\066\uffed\001" +
    "\002\000\072\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\042\uffe7\043\uffe7\052\uffe7\055\uffe7\060" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\001\002\000\072\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\042" +
    "\uffdf\043\uffdf\052\uffdf\055\uffdf\060\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\001\002\000\004\062\177\001\002\000\072\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\042\uffeb\043\uffeb\052\uffeb\055\uffeb\060\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\001\002\000\024\030\075\031\061\042\037" +
    "\043\047\052\062\055\076\064\053\065\074\066\071\001" +
    "\002\000\004\062\202\001\002\000\072\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\042\uffd7\043" +
    "\uffd7\052\uffd7\055\uffd7\060\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\001\002\000\004\055\204\001\002\000\024\030\075\031" +
    "\061\042\037\043\047\052\062\055\076\064\053\065\206" +
    "\066\071\001\002\000\026\044\130\045\131\046\133\047" +
    "\126\050\127\051\134\053\uff90\054\uff90\056\uff90\062\uff90" +
    "\001\002\000\060\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\121\036\120\037\123\040\116\041\113\042\114" +
    "\043\115\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\053\uffae\054\uffae\055\117\056\uffae\062\uffae\001\002" +
    "\000\010\053\212\054\213\056\211\001\002\000\024\030" +
    "\075\031\061\042\037\043\047\052\062\055\076\064\053" +
    "\065\125\066\071\001\002\000\004\062\214\001\002\000" +
    "\024\030\uffbc\031\uffbc\042\uffbc\043\uffbc\052\uffbc\055\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\001\002\000\024\030\uffbd\031" +
    "\uffbd\042\uffbd\043\uffbd\052\uffbd\055\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\001\002\000\072\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\042\uff8b\043\uff8b\052\uff8b" +
    "\055\uff8b\060\uff8b\064\uff8b\065\uff8b\066\uff8b\001\002\000" +
    "\026\044\130\045\131\046\133\047\126\050\127\051\134" +
    "\053\uff8e\054\uff8e\056\uff8e\062\uff8e\001\002\000\024\030" +
    "\075\031\061\042\037\043\047\052\062\055\076\064\053" +
    "\065\125\066\071\001\002\000\026\044\130\045\131\046" +
    "\133\047\126\050\127\051\134\053\uff8f\054\uff8f\056\uff8f" +
    "\062\uff8f\001\002\000\004\065\222\001\002\000\006\061" +
    "\225\062\226\001\002\000\010\041\223\061\uffad\062\uffad" +
    "\001\002\000\024\030\075\031\061\042\037\043\047\052" +
    "\062\055\076\064\053\065\125\066\071\001\002\000\022" +
    "\044\130\045\131\046\133\047\126\050\127\051\134\061" +
    "\uffab\062\uffab\001\002\000\004\065\227\001\002\000\100" +
    "\002\uffa9\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\042\uffa9\043\uffa9\052\uffa9" +
    "\055\uffa9\060\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000" +
    "\010\041\230\061\uffac\062\uffac\001\002\000\024\030\075" +
    "\031\061\042\037\043\047\052\062\055\076\064\053\065" +
    "\125\066\071\001\002\000\022\044\130\045\131\046\133" +
    "\047\126\050\127\051\134\061\uffaa\062\uffaa\001\002\000" +
    "\006\061\225\062\233\001\002\000\100\002\uffa8\003\uffa8" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\042\uffa8\043\uffa8\052\uffa8\055\uffa8\060\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\001\002\000\024\030\075\031" +
    "\061\042\037\043\047\052\062\055\076\064\053\065\206" +
    "\066\071\001\002\000\010\053\212\054\213\056\236\001" +
    "\002\000\004\057\237\001\002\000\010\003\242\010\240" +
    "\014\241\001\002\000\016\030\075\031\061\052\062\055" +
    "\252\064\250\066\255\001\002\000\004\063\277\001\002" +
    "\000\006\062\276\063\275\001\002\000\010\010\246\014" +
    "\245\060\244\001\002\000\072\004\uff87\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015" +
    "\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\027\uff87\030\uff87\031\uff87\042\uff87\043\uff87\052" +
    "\uff87\055\uff87\060\uff87\064\uff87\065\uff87\066\uff87\001\002" +
    "\000\004\063\273\001\002\000\016\030\075\031\061\052" +
    "\062\055\252\064\250\066\255\001\002\000\020\030\uff7d" +
    "\031\uff7d\032\uff7d\033\uff7d\034\uff7d\056\uff7d\063\uff7d\001" +
    "\002\000\020\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79" +
    "\056\uff79\063\uff79\001\002\000\020\030\uff7f\031\uff7f\032" +
    "\144\033\142\034\145\056\uff7f\063\uff7f\001\002\000\016" +
    "\030\075\031\061\052\062\055\252\064\250\066\255\001" +
    "\002\000\010\030\136\031\140\063\267\001\002\000\010" +
    "\055\256\064\260\066\257\001\002\000\020\030\uff77\031" +
    "\uff77\032\uff77\033\uff77\034\uff77\056\uff77\063\uff77\001\002" +
    "\000\016\030\075\031\061\052\062\055\252\064\250\066" +
    "\255\001\002\000\020\030\uff78\031\uff78\032\uff78\033\uff78" +
    "\034\uff78\056\uff78\063\uff78\001\002\000\020\030\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\056\uff7a\063\uff7a\001\002" +
    "\000\010\030\136\031\140\056\262\001\002\000\020\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\056\uff7b\063\uff7b" +
    "\001\002\000\016\030\075\031\061\052\062\055\252\064" +
    "\250\066\255\001\002\000\020\030\uff80\031\uff80\032\144" +
    "\033\142\034\145\056\uff80\063\uff80\001\002\000\016\030" +
    "\075\031\061\052\062\055\252\064\250\066\255\001\002" +
    "\000\020\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\056" +
    "\uff7e\063\uff7e\001\002\000\066\003\057\004\041\005\077" +
    "\006\044\007\043\011\012\012\005\013\066\015\064\017" +
    "\056\020\033\021\006\022\014\023\051\024\004\025\060" +
    "\027\052\030\075\031\061\042\037\043\047\052\062\055" +
    "\076\064\053\065\074\066\071\001\002\000\072\004\164" +
    "\005\077\006\044\007\043\010\uff86\011\012\012\005\013" +
    "\066\014\uff86\015\064\017\056\020\033\021\006\022\014" +
    "\023\051\024\004\025\060\027\052\030\075\031\061\042" +
    "\037\043\047\052\062\055\076\060\uff86\064\053\065\074" +
    "\066\071\001\002\000\010\030\136\031\140\056\272\001" +
    "\002\000\020\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\056\uff7c\063\uff7c\001\002\000\066\003\057\004\041\005" +
    "\077\006\044\007\043\011\012\012\005\013\066\015\064" +
    "\017\056\020\033\021\006\022\014\023\051\024\004\025" +
    "\060\027\052\030\075\031\061\042\037\043\047\052\062" +
    "\055\076\064\053\065\074\066\071\001\002\000\072\004" +
    "\164\005\077\006\044\007\043\010\uff84\011\012\012\005" +
    "\013\066\014\uff84\015\064\017\056\020\033\021\006\022" +
    "\014\023\051\024\004\025\060\027\052\030\075\031\061" +
    "\042\037\043\047\052\062\055\076\060\uff84\064\053\065" +
    "\074\066\071\001\002\000\010\010\uff82\014\uff82\060\uff82" +
    "\001\002\000\010\010\uff81\014\uff81\060\uff81\001\002\000" +
    "\066\003\057\004\041\005\077\006\044\007\043\011\012" +
    "\012\005\013\066\015\064\017\056\020\033\021\006\022" +
    "\014\023\051\024\004\025\060\027\052\030\075\031\061" +
    "\042\037\043\047\052\062\055\076\064\053\065\074\066" +
    "\071\001\002\000\072\004\164\005\077\006\044\007\043" +
    "\010\uff83\011\012\012\005\013\066\014\uff83\015\064\017" +
    "\056\020\033\021\006\022\014\023\051\024\004\025\060" +
    "\027\052\030\075\031\061\042\037\043\047\052\062\055" +
    "\076\060\uff83\064\053\065\074\066\071\001\002\000\010" +
    "\030\136\031\140\063\302\001\002\000\066\003\057\004" +
    "\041\005\077\006\044\007\043\011\012\012\005\013\066" +
    "\015\064\017\056\020\033\021\006\022\014\023\051\024" +
    "\004\025\060\027\052\030\075\031\061\042\037\043\047" +
    "\052\062\055\076\064\053\065\074\066\071\001\002\000" +
    "\072\004\164\005\077\006\044\007\043\010\uff85\011\012" +
    "\012\005\013\066\014\uff85\015\064\017\056\020\033\021" +
    "\006\022\014\023\051\024\004\025\060\027\052\030\075" +
    "\031\061\042\037\043\047\052\062\055\076\060\uff85\064" +
    "\053\065\074\066\071\001\002\000\072\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\042\uffd4\043" +
    "\uffd4\052\uffd4\055\uffd4\060\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\072\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\042\uffd3\043\uffd3\052\uffd3\055\uffd3" +
    "\060\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002\000\072\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\042\uffd5\043\uffd5\052\uffd5\055\uffd5\060\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\001\002\000\014\011\012\021\006\022\014" +
    "\024\004\065\222\001\002\000\004\056\324\001\002\000" +
    "\004\065\222\001\002\000\006\061\225\062\313\001\002" +
    "\000\024\030\075\031\061\042\037\043\047\052\062\055" +
    "\076\064\053\065\206\066\071\001\002\000\010\053\212" +
    "\054\213\062\315\001\002\000\024\030\075\031\061\042" +
    "\037\043\047\052\062\055\076\064\053\065\074\066\071" +
    "\001\002\000\006\056\uff88\061\106\001\002\000\006\061" +
    "\225\062\320\001\002\000\024\030\075\031\061\042\037" +
    "\043\047\052\062\055\076\064\053\065\206\066\071\001" +
    "\002\000\010\053\212\054\213\062\322\001\002\000\024" +
    "\030\075\031\061\042\037\043\047\052\062\055\076\064" +
    "\053\065\074\066\071\001\002\000\006\056\uff89\061\106" +
    "\001\002\000\004\057\325\001\002\000\066\003\057\004" +
    "\041\005\077\006\044\007\043\011\012\012\005\013\066" +
    "\015\064\017\056\020\033\021\006\022\014\023\051\024" +
    "\004\025\060\027\052\030\075\031\061\042\037\043\047" +
    "\052\062\055\076\064\053\065\074\066\071\001\002\000" +
    "\066\004\164\005\077\006\044\007\043\011\012\012\005" +
    "\013\066\015\064\017\056\020\033\021\006\022\014\023" +
    "\051\024\004\025\060\027\052\030\075\031\061\042\037" +
    "\043\047\052\062\055\076\060\327\064\053\065\074\066" +
    "\071\001\002\000\072\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\042\uff8a\043\uff8a\052\uff8a\055" +
    "\uff8a\060\uff8a\064\uff8a\065\uff8a\066\uff8a\001\002\000\024" +
    "\030\075\031\061\042\037\043\047\052\062\055\076\064" +
    "\053\065\206\066\071\001\002\000\010\053\212\054\213" +
    "\056\332\001\002\000\004\057\333\001\002\000\066\003" +
    "\057\004\041\005\077\006\044\007\043\011\012\012\005" +
    "\013\066\015\064\017\056\020\033\021\006\022\014\023" +
    "\051\024\004\025\060\027\052\030\075\031\061\042\037" +
    "\043\047\052\062\055\076\064\053\065\074\066\071\001" +
    "\002\000\066\004\164\005\077\006\044\007\043\011\012" +
    "\012\005\013\066\015\064\017\056\020\033\021\006\022" +
    "\014\023\051\024\004\025\060\027\052\030\075\031\061" +
    "\042\037\043\047\052\062\055\076\060\335\064\053\065" +
    "\074\066\071\001\002\000\072\004\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\027\uff8c\030\uff8c\031\uff8c\042\uff8c\043\uff8c\052" +
    "\uff8c\055\uff8c\060\uff8c\064\uff8c\065\uff8c\066\uff8c\001\002" +
    "\000\072\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030" +
    "\uffce\031\uffce\042\uffce\043\uffce\052\uffce\055\uffce\060\uffce" +
    "\064\uffce\065\uffce\066\uffce\001\002\000\004\062\340\001" +
    "\002\000\072\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\042\uffcf\043\uffcf\052\uffcf\055\uffcf\060" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\064\002\uff9c" +
    "\003\uff9c\004\uff9c\011\uff9c\012\uff9c\021\uff9c\022\uff9c\024" +
    "\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\053" +
    "\uff9c\054\uff9c\056\uff9c\061\uff9c\062\uff9c\001\002\000\006" +
    "\056\344\065\346\001\002\000\004\056\352\001\002\000" +
    "\004\062\351\001\002\000\004\061\347\001\002\000\010" +
    "\041\223\056\uff74\061\uffad\001\002\000\004\065\350\001" +
    "\002\000\010\041\230\056\uff73\061\uffac\001\002\000\072" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\027\uff94\030\uff94\031" +
    "\uff94\042\uff94\043\uff94\052\uff94\055\uff94\060\uff94\064\uff94" +
    "\065\uff94\066\uff94\001\002\000\004\062\353\001\002\000" +
    "\072\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\027\uff93\030\uff93" +
    "\031\uff93\042\uff93\043\uff93\052\uff93\055\uff93\060\uff93\064" +
    "\uff93\065\uff93\066\uff93\001\002\000\072\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\042\uffcd\043" +
    "\uffcd\052\uffcd\055\uffcd\060\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\001\002\000\024\030\075\031\061\042\037\043\047\052" +
    "\062\055\076\064\053\065\074\066\071\001\002\000\004" +
    "\062\357\001\002\000\072\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\042\uffd6\043\uffd6\052\uffd6" +
    "\055\uffd6\060\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\024\002\ufff0\003\363\004\362\011\012\012\005\021\006" +
    "\022\014\024\004\026\016\001\002\000\024\002\ufff5\003" +
    "\363\004\362\011\012\012\005\021\006\022\014\024\004" +
    "\026\016\001\002\000\004\065\372\001\002\000\006\060" +
    "\366\062\367\001\002\000\004\002\ufff4\001\002\000\004" +
    "\002\uffee\001\002\000\022\003\363\004\362\011\012\012" +
    "\005\021\006\022\014\024\004\026\016\001\002\000\022" +
    "\003\363\004\362\011\012\012\005\021\006\022\014\024" +
    "\004\026\016\001\002\000\004\002\ufff2\001\002\000\004" +
    "\002\ufff3\001\002\000\024\030\075\031\061\042\037\043" +
    "\047\052\062\055\076\064\053\065\074\066\071\001\002" +
    "\000\026\002\ufff7\003\363\004\362\011\012\012\005\021" +
    "\006\022\014\024\004\026\016\062\374\001\002\000\024" +
    "\002\ufff6\003\363\004\362\011\012\012\005\021\006\022" +
    "\014\024\004\026\016\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufff9\001\002\000\004\002\ufff8\001\002\000" +
    "\064\002\uff9b\003\uff9b\004\uff9b\011\uff9b\012\uff9b\021\uff9b" +
    "\022\uff9b\024\uff9b\026\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\053\uff9b\054\uff9b\056\uff9b\061\uff9b\062\uff9b\001" +
    "\002\000\024\030\075\031\061\042\037\043\047\052\062" +
    "\055\076\064\053\065\206\066\071\001\002\000\010\053" +
    "\212\054\213\056\u0103\001\002\000\004\057\u0104\001\002" +
    "\000\066\003\057\004\041\005\077\006\044\007\043\011" +
    "\012\012\005\013\066\015\064\017\056\020\033\021\006" +
    "\022\014\023\051\024\004\025\060\027\052\030\075\031" +
    "\061\042\037\043\047\052\062\055\076\064\053\065\074" +
    "\066\071\001\002\000\066\004\164\005\077\006\044\007" +
    "\043\011\012\012\005\013\066\015\064\017\056\020\033" +
    "\021\006\022\014\023\051\024\004\025\060\027\052\030" +
    "\075\031\061\042\037\043\047\052\062\055\076\060\u0106" +
    "\064\053\065\074\066\071\001\002\000\074\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\u0107\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\027\uff91\030\uff91\031\uff91" +
    "\042\uff91\043\uff91\052\uff91\055\uff91\060\uff91\064\uff91\065" +
    "\uff91\066\uff91\001\002\000\004\057\u0108\001\002\000\066" +
    "\003\057\004\041\005\077\006\044\007\043\011\012\012" +
    "\005\013\066\015\064\017\056\020\033\021\006\022\014" +
    "\023\051\024\004\025\060\027\052\030\075\031\061\042" +
    "\037\043\047\052\062\055\076\064\053\065\074\066\071" +
    "\001\002\000\066\004\164\005\077\006\044\007\043\011" +
    "\012\012\005\013\066\015\064\017\056\020\033\021\006" +
    "\022\014\023\051\024\004\025\060\027\052\030\075\031" +
    "\061\042\037\043\047\052\062\055\076\060\u010a\064\053" +
    "\065\074\066\071\001\002\000\072\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d\042\uff8d\043\uff8d" +
    "\052\uff8d\055\uff8d\060\uff8d\064\uff8d\065\uff8d\066\uff8d\001" +
    "\002\000\006\056\uffd2\061\uffd2\001\002\000\022\003\363" +
    "\004\362\011\012\012\005\021\006\022\014\024\004\026" +
    "\016\001\002\000\022\003\015\004\013\011\012\012\005" +
    "\021\006\022\014\024\004\026\016\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\ufffc\001\002\000\006\012\uffb1" +
    "\065\uffb1\001\002\000\024\030\075\031\061\042\037\043" +
    "\047\052\062\055\076\064\053\065\074\066\071\001\002" +
    "\000\024\003\015\004\013\011\012\012\005\021\006\022" +
    "\014\024\004\026\016\062\u0114\001\002\000\004\002\000" +
    "\001\002\000\022\003\015\004\013\011\012\012\005\021" +
    "\006\022\014\024\004\026\016\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\ufffe\001" +
    "\002\000\012\041\223\055\u0119\061\uffad\062\uffad\001\002" +
    "\000\016\011\012\021\006\022\014\024\004\056\uffd0\061" +
    "\uffd0\001\002\000\006\056\u011b\061\025\001\002\000\004" +
    "\057\u011c\001\002\000\066\003\057\004\041\005\077\006" +
    "\044\007\043\011\012\012\005\013\066\015\064\017\056" +
    "\020\033\021\006\022\014\023\051\024\004\025\060\027" +
    "\052\030\075\031\061\042\037\043\047\052\062\055\076" +
    "\064\053\065\074\066\071\001\002\000\066\004\164\005" +
    "\077\006\044\007\043\011\012\012\005\013\066\015\064" +
    "\017\056\020\033\021\006\022\014\023\051\024\004\025" +
    "\060\027\052\030\075\031\061\042\037\043\047\052\062" +
    "\055\076\060\u011e\064\053\065\074\066\071\001\002\000" +
    "\024\002\ufff1\003\363\004\362\011\012\012\005\021\006" +
    "\022\014\024\004\026\016\001\002\000\004\002\uffef\001" +
    "\002\000\004\065\222\001\002\000\006\061\225\062\u0122" +
    "\001\002\000\100\002\uffa7\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\042\uffa7" +
    "\043\uffa7\052\uffa7\055\uffa7\060\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\001\002\000\006\012\uffb2\065\uffb2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\012\002\016\013\006\016\007\040\010\001" +
    "\001\000\002\001\001\000\004\013\u011f\001\001\000\002" +
    "\001\001\000\004\015\220\001\001\000\012\002\016\013" +
    "\006\016\007\040\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\022\013\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\037\007" +
    "\067\013\062\014\034\016\066\017\031\020\035\021\033" +
    "\022\054\023\077\024\053\025\030\026\045\027\072\030" +
    "\047\034\041\035\071\036\044\042\064\001\001\000\002" +
    "\001\001\000\004\010\131\001\001\000\002\001\001\000" +
    "\004\005\142\001\001\000\002\001\001\000\004\006\136" +
    "\001\001\000\002\001\001\000\046\007\067\013\062\014" +
    "\034\016\172\017\031\020\035\021\033\022\054\023\175" +
    "\024\170\025\161\026\166\027\174\030\167\034\164\035" +
    "\173\036\165\042\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\067\014\034\017\031\020\035\021\033\022" +
    "\054\023\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\121\001\001\000\002\001\001" +
    "\000\020\007\067\014\034\017\031\020\035\021\033\022" +
    "\054\023\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\067\014\034\017\031\020" +
    "\035\021\033\022\054\023\103\033\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\067\014\034\017\031\020\035\021\033\022\054\023\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\067\014" +
    "\034\017\031\020\035\021\033\022\054\023\103\033\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\067\014\034\017\123\020\035\021\033\022\054\001\001" +
    "\000\002\001\001\000\004\010\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\067\014\034\020\134\021" +
    "\033\022\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\136\001\001\000\002\001\001\000\012\007" +
    "\067\014\034\021\140\022\054\001\001\000\002\001\001" +
    "\000\004\005\142\001\001\000\002\001\001\000\010\007" +
    "\067\014\034\022\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\067\014\034\017\031" +
    "\020\035\021\033\022\054\023\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\160\007\067\013\062\014" +
    "\034\016\066\017\031\020\035\021\033\022\054\023\077" +
    "\024\053\025\030\026\045\027\072\030\047\034\041\035" +
    "\071\036\044\042\064\001\001\000\046\007\067\013\062" +
    "\014\034\016\172\017\031\020\035\021\033\022\054\023" +
    "\175\024\170\025\161\026\166\027\174\030\167\034\164" +
    "\035\173\036\165\042\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\067\014\034\017\031\020\035\021\033\022\054" +
    "\023\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\067\014\034\017\204\020\035" +
    "\021\033\022\054\031\206\001\001\000\004\010\131\001" +
    "\001\000\004\012\215\001\001\000\004\011\207\001\001" +
    "\000\016\007\067\014\034\017\214\020\035\021\033\022" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\131\001\001\000" +
    "\016\007\067\014\034\017\216\020\035\021\033\022\054" +
    "\001\001\000\004\010\131\001\001\000\004\015\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\067" +
    "\014\034\017\223\020\035\021\033\022\054\001\001\000" +
    "\004\010\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\067\014\034\017\230\020" +
    "\035\021\033\022\054\001\001\000\004\010\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\067\014" +
    "\034\017\204\020\035\021\033\022\054\031\234\001\001" +
    "\000\004\011\207\001\001\000\002\001\001\000\004\043" +
    "\242\001\001\000\012\007\253\044\300\045\250\046\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\253" +
    "\044\252\045\250\046\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\264\001\001\000\012\007\253" +
    "\044\270\045\250\046\246\001\001\000\004\006\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\253" +
    "\044\260\045\250\046\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\262\001\001\000\002\001\001" +
    "\000\010\007\253\045\263\046\246\001\001\000\004\005" +
    "\264\001\001\000\006\007\253\046\265\001\001\000\002" +
    "\001\001\000\050\003\267\007\067\013\062\014\034\016" +
    "\066\017\031\020\035\021\033\022\054\023\077\024\053" +
    "\025\030\026\045\027\072\030\047\034\041\035\071\036" +
    "\044\042\064\001\001\000\046\007\067\013\062\014\034" +
    "\016\172\017\031\020\035\021\033\022\054\023\175\024" +
    "\170\025\161\026\166\027\174\030\167\034\164\035\173" +
    "\036\165\042\171\001\001\000\004\006\262\001\001\000" +
    "\002\001\001\000\050\003\273\007\067\013\062\014\034" +
    "\016\066\017\031\020\035\021\033\022\054\023\077\024" +
    "\053\025\030\026\045\027\072\030\047\034\041\035\071" +
    "\036\044\042\064\001\001\000\046\007\067\013\062\014" +
    "\034\016\172\017\031\020\035\021\033\022\054\023\175" +
    "\024\170\025\161\026\166\027\174\030\167\034\164\035" +
    "\173\036\165\042\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\277\007\067\013\062\014\034\016" +
    "\066\017\031\020\035\021\033\022\054\023\077\024\053" +
    "\025\030\026\045\027\072\030\047\034\041\035\071\036" +
    "\044\042\064\001\001\000\046\007\067\013\062\014\034" +
    "\016\172\017\031\020\035\021\033\022\054\023\175\024" +
    "\170\025\161\026\166\027\174\030\167\034\164\035\173" +
    "\036\165\042\171\001\001\000\004\006\262\001\001\000" +
    "\050\003\302\007\067\013\062\014\034\016\066\017\031" +
    "\020\035\021\033\022\054\023\077\024\053\025\030\026" +
    "\045\027\072\030\047\034\041\035\071\036\044\042\064" +
    "\001\001\000\046\007\067\013\062\014\034\016\172\017" +
    "\031\020\035\021\033\022\054\023\175\024\170\025\161" +
    "\026\166\027\174\030\167\034\164\035\173\036\165\042" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\310\015\311\032\307\001\001\000" +
    "\002\001\001\000\004\015\316\001\001\000\002\001\001" +
    "\000\020\007\067\014\034\017\204\020\035\021\033\022" +
    "\054\031\313\001\001\000\004\011\207\001\001\000\022" +
    "\007\067\014\034\017\031\020\035\021\033\022\054\023" +
    "\103\033\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\067\014\034\017\204\020\035\021\033\022" +
    "\054\031\320\001\001\000\004\011\207\001\001\000\022" +
    "\007\067\014\034\017\031\020\035\021\033\022\054\023" +
    "\103\033\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\325\007\067\013\062\014\034\016\066\017" +
    "\031\020\035\021\033\022\054\023\077\024\053\025\030" +
    "\026\045\027\072\030\047\034\041\035\071\036\044\042" +
    "\064\001\001\000\046\007\067\013\062\014\034\016\172" +
    "\017\031\020\035\021\033\022\054\023\175\024\170\025" +
    "\161\026\166\027\174\030\167\034\164\035\173\036\165" +
    "\042\171\001\001\000\002\001\001\000\020\007\067\014" +
    "\034\017\204\020\035\021\033\022\054\031\330\001\001" +
    "\000\004\011\207\001\001\000\002\001\001\000\050\003" +
    "\333\007\067\013\062\014\034\016\066\017\031\020\035" +
    "\021\033\022\054\023\077\024\053\025\030\026\045\027" +
    "\072\030\047\034\041\035\071\036\044\042\064\001\001" +
    "\000\046\007\067\013\062\014\034\016\172\017\031\020" +
    "\035\021\033\022\054\023\175\024\170\025\161\026\166" +
    "\027\174\030\167\034\164\035\173\036\165\042\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\344\037" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\067\014\034\017\031\020" +
    "\035\021\033\022\054\023\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\363\013\006\016\360\041" +
    "\364\001\001\000\012\002\363\013\006\016\360\041\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\363\013\006\016\360" +
    "\041\370\001\001\000\012\002\363\013\006\016\360\041" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\067\014\034\017\031\020\035\021\033\022\054\023" +
    "\372\001\001\000\012\002\363\013\006\016\360\041\374" +
    "\001\001\000\012\002\363\013\006\016\360\041\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\067\014\034\017\204\020" +
    "\035\021\033\022\054\031\u0101\001\001\000\004\011\207" +
    "\001\001\000\002\001\001\000\050\003\u0104\007\067\013" +
    "\062\014\034\016\066\017\031\020\035\021\033\022\054" +
    "\023\077\024\053\025\030\026\045\027\072\030\047\034" +
    "\041\035\071\036\044\042\064\001\001\000\046\007\067" +
    "\013\062\014\034\016\172\017\031\020\035\021\033\022" +
    "\054\023\175\024\170\025\161\026\166\027\174\030\167" +
    "\034\164\035\173\036\165\042\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\u0108\007\067\013\062" +
    "\014\034\016\066\017\031\020\035\021\033\022\054\023" +
    "\077\024\053\025\030\026\045\027\072\030\047\034\041" +
    "\035\071\036\044\042\064\001\001\000\046\007\067\013" +
    "\062\014\034\016\172\017\031\020\035\021\033\022\054" +
    "\023\175\024\170\025\161\026\166\027\174\030\167\034" +
    "\164\035\173\036\165\042\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\363\013\006\016\360\041" +
    "\u010e\001\001\000\012\002\016\013\006\016\007\040\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\067\014\034\017\031\020\035\021\033" +
    "\022\054\023\u0111\001\001\000\012\002\016\013\006\016" +
    "\007\040\u0112\001\001\000\002\001\001\000\012\002\016" +
    "\013\006\016\007\040\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\u0119\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\u011c\007\067\013\062\014\034\016\066" +
    "\017\031\020\035\021\033\022\054\023\077\024\053\025" +
    "\030\026\045\027\072\030\047\034\041\035\071\036\044" +
    "\042\064\001\001\000\046\007\067\013\062\014\034\016" +
    "\172\017\031\020\035\021\033\022\054\023\175\024\170" +
    "\025\161\026\166\027\174\030\167\034\164\035\173\036" +
    "\165\042\171\001\001\000\012\002\363\013\006\016\360" +
    "\041\u011e\001\001\000\002\001\001\000\004\015\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<Symbol> s = new ArrayList<Symbol>();
    
    public void syntax_error(Symbol s){
        this.s.add(s);
    }

    public ArrayList<Symbol> getS(){
        return this.s;
    }
    
    protected final static int _error_sync_size = 3;
    protected int error_sync_size( ) {
        return _error_sync_size;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LISTA_IDENTIFICADORES ::= DECLARACION_LIST Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES Coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONSTANT_FACTOR ::= LiteralChar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONSTANT_FACTOR ::= DATO_PREFIX LiteralChar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONSTANT_FACTOR ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONSTANT_FACTOR ::= DATO_PREFIX Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONSTANT_FACTOR ::= DATO_PREFIX ParentesisA OPERACION_SWITCH1 ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONSTANT_FACTOR ::= ParentesisA OPERACION_SWITCH1 ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION_SWITCH2 ::= CONSTANT_FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION_SWITCH2 ::= OPERACION_SWITCH2 OPERADOR_ARITMETICO2 CONSTANT_FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION_SWITCH1 ::= OPERACION_SWITCH2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH1",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACION_SWITCH1 ::= OPERACION_SWITCH1 OPERADOR_ARITMETICO1 OPERACION_SWITCH2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH1",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ETIQUETA_SWITCH ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ETIQUETA_SWITCH ::= error DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ETIQUETA_SWITCH ::= Default DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ETIQUETA_SWITCH ::= ETIQUETA_SWITCH Default DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ETIQUETA_SWITCH ::= Case OPERACION_SWITCH1 DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ETIQUETA_SWITCH ::= ETIQUETA_SWITCH Case OPERACION_SWITCH1 DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SWITCH ::= Switch ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA ETIQUETA_SWITCH LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_FOR ::= DECLARACION_LIST PuntoComa SENTENCIA_BOOLEANA PuntoComa LISTA_EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_FOR ::= TIPO_DATO DECLARACION_LIST PuntoComa SENTENCIA_BOOLEANA PuntoComa LISTA_EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FOR ::= For ParentesisA SENTENCIA_FOR ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentesisA SENTENCIA_BOOLEANA ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WHILE ::= While ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IF_ELSE ::= If ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA OPERADOR_OR_AND OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Identificador OPERADOR_ASIG OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IF ::= If ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WRITE ::= Write ParentesisA LISTA_EXPRESIONES ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // READ ::= Read ParentesisA LISTA_IDENTIFICADORES ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // READ ::= Read ParentesisA ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= Identificador OPERADOR_ASIG OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FACTOR ::= Identificador ParentesisA ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FACTOR ::= Identificador ParentesisA LISTA_EXPRESIONES ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FACTOR ::= Identificador OperadorIncremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FACTOR ::= Identificador OperadorDecremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FACTOR ::= OperadorIncremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FACTOR ::= OperadorDecremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FACTOR ::= DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FACTOR ::= DATO_PREFIX DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FACTOR ::= DATO_PREFIX ParentesisA EXPRESION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FACTOR ::= ParentesisA EXPRESION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACION2 ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACION2 ::= OPERACION2 OPERADOR_ARITMETICO2 FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACION1 ::= OPERACION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION1",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION1 ::= OPERACION1 OPERADOR_ARITMETICO1 OPERACION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION1",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACION ::= OPERACION1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERACION ::= OPERACION OPERADOR_BOOL OPERACION1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Const TIPO_DATO DECLARACION_LIST PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= TIPO_DATO Const DECLARACION_LIST PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= TIPO_DATO DECLARACION_LIST PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_LIST ::= DECLARACION_LIST Coma Identificador OperadorAsignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION_LIST ::= Identificador OperadorAsignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_LIST ::= DECLARACION_LIST Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_LIST ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DATO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DATO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DATO ::= LiteralChar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO_DATO ::= Long Integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO_DATO ::= Short Integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO_DATO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO_DATO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO_DATO ::= Integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO_DATO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADOR_ASIG ::= OperadorAsignacionDiv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADOR_ASIG ::= OperadorAsignacionMul 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADOR_ASIG ::= OperadorAsignacionResta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADOR_ASIG ::= OperadorAsignacionSuma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADOR_ASIG ::= OperadorAsignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR_OR_AND ::= OperadorAnd 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_OR_AND",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR_OR_AND ::= OperadorOr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_OR_AND",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR_BOOL ::= OperadorDiferencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR_BOOL ::= OperadorMenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR_BOOL ::= OperadorMayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR_BOOL ::= OperadorMayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR_BOOL ::= OperadorMenor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR_BOOL ::= OperadorComparacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DATO_PREFIX ::= OperadorNegacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_PREFIX",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DATO_PREFIX ::= OperadorResta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_PREFIX",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DATO_PREFIX ::= OperadorSuma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_PREFIX",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR_ARITMETICO1 ::= OperadorResta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR_ARITMETICO1 ::= OperadorSuma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_ARITMETICO2 ::= OperadorMod 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO2",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR_ARITMETICO2 ::= OperadorDiv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO2",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADOR_ARITMETICO2 ::= OperadorMulti 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO2",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCIONES_CONTROL ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCIONES_CONTROL ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCIONES_CONTROL ::= Return PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCIONES_CONTROL ::= Return EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMETROS ::= PARAMETROS Coma TIPO_DATO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROS ::= TIPO_DATO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= error ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= Define Identificador EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SENTENCIA Define Identificador EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= INSTRUCCIONES_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA INSTRUCCIONES_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= Void Identificador ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= TIPO_DATO Identificador ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= Void Identificador ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= TIPO_DATO Identificador ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO_B ::= error PuntoComa INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO_B ::= error LlaveC INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO_B ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO_B ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO_B ::= Define Identificador EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO_B ::= Define Identificador EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO_B ::= DECLARACION INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO_B ::= Define Identificador EXPRESION PuntoComa INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO_B ::= Define Identificador EXPRESION INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error PuntoComa INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error LlaveC INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DECLARACION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Define Identificador EXPRESION PuntoComa INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Define Identificador EXPRESION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

