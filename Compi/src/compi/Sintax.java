
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 21:34:41 CST 2022
//----------------------------------------------------

package compi;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 21:34:41 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\040\006\000\002\040" +
    "\007\000\002\051\002\000\002\040\005\000\002\040\003" +
    "\000\002\040\005\000\002\040\005\000\002\041\006\000" +
    "\002\041\007\000\002\052\002\000\002\041\005\000\002" +
    "\041\005\000\002\041\006\000\002\041\003\000\002\041" +
    "\003\000\002\041\005\000\002\041\005\000\002\002\012" +
    "\000\002\002\012\000\002\053\002\000\002\002\014\000" +
    "\002\054\002\000\002\002\014\000\002\050\003\000\002" +
    "\047\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\007\000\002\003\006\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\004\004\000\002\004" +
    "\006\000\002\004\002\000\002\026\005\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\007\000\002\016\005\000\002\016\006\000\002\016\006" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\006\000\002\022\004\000\002\022" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\006\000\002\022\005\000" +
    "\002\055\002\000\002\023\006\000\002\023\003\000\002" +
    "\035\006\000\002\035\007\000\002\036\007\000\002\056" +
    "\002\000\002\057\002\000\002\024\013\000\002\031\003" +
    "\000\002\060\002\000\002\031\006\000\002\031\005\000" +
    "\002\061\002\000\002\025\010\000\002\062\002\000\002" +
    "\063\002\000\002\027\013\000\002\064\002\000\002\030" +
    "\014\000\002\065\002\000\002\034\012\000\002\032\010" +
    "\000\002\032\007\000\002\066\002\000\002\042\012\000" +
    "\002\043\007\000\002\043\006\000\002\043\006\000\002" +
    "\043\005\000\002\043\004\000\002\043\004\000\002\044" +
    "\005\000\002\044\003\000\002\045\005\000\002\045\003" +
    "\000\002\046\005\000\002\046\006\000\002\046\004\000" +
    "\002\046\003\000\002\046\004\000\002\046\003\000\002" +
    "\033\003\000\002\033\005\000\002\037\003\000\002\037" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\022\003\016\004\014\011\013\012\004\021" +
    "\006\022\015\024\005\026\017\001\002\000\012\011\013" +
    "\021\006\022\015\024\005\001\002\000\010\012\uffad\021" +
    "\u0130\065\uffad\001\002\000\006\012\uffaf\065\uffaf\001\002" +
    "\000\004\065\u0127\001\002\000\022\003\ufffe\004\ufffe\011" +
    "\ufffe\012\ufffe\021\ufffe\022\ufffe\024\ufffe\026\ufffe\001\002" +
    "\000\006\012\146\065\151\001\002\000\004\002\145\001" +
    "\002\000\006\012\uffb0\065\uffb0\001\002\000\004\065\140" +
    "\001\002\000\010\012\uffae\021\137\065\uffae\001\002\000" +
    "\006\060\021\062\022\001\002\000\004\065\uffe9\001\002" +
    "\000\004\002\ufffc\001\002\000\022\003\026\004\025\011" +
    "\013\012\004\021\006\022\015\024\005\026\017\001\002" +
    "\000\022\003\016\004\014\011\013\012\004\021\006\022" +
    "\015\024\005\026\017\001\002\000\004\002\ufffa\001\002" +
    "\000\024\002\ufff3\003\ufff7\004\ufff7\011\ufff7\012\ufff7\021" +
    "\ufff7\022\ufff7\024\ufff7\026\ufff7\001\002\000\004\065\035" +
    "\001\002\000\006\060\031\062\032\001\002\000\004\002" +
    "\ufff2\001\002\000\004\002\ufffb\001\002\000\022\003\026" +
    "\004\025\011\013\012\004\021\006\022\015\024\005\026" +
    "\017\001\002\000\022\003\026\004\025\011\013\012\004" +
    "\021\006\022\015\024\005\026\017\001\002\000\004\002" +
    "\ufff0\001\002\000\004\002\ufff1\001\002\000\024\030\036" +
    "\031\044\042\043\043\046\052\052\055\047\064\045\065" +
    "\050\066\054\001\002\000\012\055\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\001\002\000\064\002\uff9d\003\uff9d\004\uff9d\011" +
    "\uff9d\012\uff9d\021\uff9d\022\uff9d\024\uff9d\026\uff9d\030\uff9d" +
    "\031\uff9d\032\120\033\116\034\121\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\053\uff9d\054\uff9d\056\uff9d" +
    "\061\uff9d\062\uff9d\001\002\000\056\002\uff9f\003\uff9f\004" +
    "\uff9f\011\uff9f\012\uff9f\021\uff9f\022\uff9f\024\uff9f\026\uff9f" +
    "\030\112\031\114\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\053\uff9f\054\uff9f\056\uff9f\061\uff9f\062\uff9f" +
    "\001\002\000\046\002\uff8e\003\uff8e\004\uff8e\011\uff8e\012" +
    "\uff8e\021\uff8e\022\uff8e\024\uff8e\026\uff8e\044\105\045\104" +
    "\046\107\047\102\050\103\051\110\056\uff8e\061\uff8e\062" +
    "\uff8e\001\002\000\064\002\uff9b\003\uff9b\004\uff9b\011\uff9b" +
    "\012\uff9b\021\uff9b\022\uff9b\024\uff9b\026\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b\056\uff9b\061" +
    "\uff9b\062\uff9b\001\002\000\004\065\134\001\002\000\012" +
    "\055\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000\064\002" +
    "\uffa9\003\uffa9\004\uffa9\011\uffa9\012\uffa9\021\uffa9\022\uffa9" +
    "\024\uffa9\026\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\054\uffa9\056\uffa9\061\uffa9\062\uffa9\001\002\000" +
    "\004\065\133\001\002\000\024\030\036\031\044\042\043" +
    "\043\046\052\052\055\047\064\045\065\050\066\054\001" +
    "\002\000\100\002\uffa8\003\uffa8\004\uffa8\011\uffa8\012\uffa8" +
    "\021\uffa8\022\uffa8\024\uffa8\026\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\067\043\070\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\055\066\056\uffa8\061\uffa8\062\uffa8" +
    "\001\002\000\064\002\uff97\003\uff97\004\uff97\011\uff97\012" +
    "\uff97\021\uff97\022\uff97\024\uff97\026\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\053\uff97\054\uff97\056\uff97\061\uff97" +
    "\062\uff97\001\002\000\012\055\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\001\002\000\012\055\061\064\045\065\062\066\054" +
    "\001\002\000\064\002\uffaa\003\uffaa\004\uffaa\011\uffaa\012" +
    "\uffaa\021\uffaa\022\uffaa\024\uffaa\026\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\056\uffaa\061\uffaa" +
    "\062\uffaa\001\002\000\026\002\ufff5\003\026\004\025\011" +
    "\013\012\004\021\006\022\015\024\005\026\017\062\056" +
    "\001\002\000\024\002\ufff4\003\026\004\025\011\013\012" +
    "\004\021\006\022\015\024\005\026\017\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\ufff8\001\002\000\024\030" +
    "\036\031\044\042\043\043\046\052\052\055\047\064\045" +
    "\065\050\066\054\001\002\000\064\002\uffa8\003\uffa8\004" +
    "\uffa8\011\uffa8\012\uffa8\021\uffa8\022\uffa8\024\uffa8\026\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8" +
    "\056\uffa8\061\uffa8\062\uffa8\001\002\000\064\002\uff98\003" +
    "\uff98\004\uff98\011\uff98\012\uff98\021\uff98\022\uff98\024\uff98" +
    "\026\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\053\uff98" +
    "\054\uff98\056\uff98\061\uff98\062\uff98\001\002\000\004\056" +
    "\065\001\002\000\064\002\uff99\003\uff99\004\uff99\011\uff99" +
    "\012\uff99\021\uff99\022\uff99\024\uff99\026\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\053\uff99\054\uff99\056\uff99\061" +
    "\uff99\062\uff99\001\002\000\006\056\124\065\125\001\002" +
    "\000\064\002\uff93\003\uff93\004\uff93\011\uff93\012\uff93\021" +
    "\uff93\022\uff93\024\uff93\026\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\053\uff93\054\uff93\056\uff93\061\uff93\062\uff93" +
    "\001\002\000\064\002\uff94\003\uff94\004\uff94\011\uff94\012" +
    "\uff94\021\uff94\022\uff94\024\uff94\026\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\053\uff94\054\uff94\056\uff94\061\uff94" +
    "\062\uff94\001\002\000\014\035\076\036\072\037\073\040" +
    "\074\041\077\001\002\000\024\030\uffb3\031\uffb3\042\uffb3" +
    "\043\uffb3\052\uffb3\055\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\024\030\uffb2\031\uffb2\042\uffb2\043\uffb2\052\uffb2" +
    "\055\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\024\030" +
    "\uffb1\031\uffb1\042\uffb1\043\uffb1\052\uffb1\055\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\001\002\000\024\030\036\031\044\042" +
    "\043\043\046\052\052\055\047\064\045\065\101\066\054" +
    "\001\002\000\024\030\uffb4\031\uffb4\042\uffb4\043\uffb4\052" +
    "\uffb4\055\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000\024" +
    "\030\uffb5\031\uffb5\042\uffb5\043\uffb5\052\uffb5\055\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\001\002\000\046\002\uff8f\003\uff8f" +
    "\004\uff8f\011\uff8f\012\uff8f\021\uff8f\022\uff8f\024\uff8f\026" +
    "\uff8f\044\105\045\104\046\107\047\102\050\103\051\110" +
    "\056\uff8f\061\uff8f\062\uff8f\001\002\000\072\002\uffa8\003" +
    "\uffa8\004\uffa8\011\uffa8\012\uffa8\021\uffa8\022\uffa8\024\uffa8" +
    "\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\042" +
    "\067\043\070\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\055\066\056\uffa8\061\uffa8\062" +
    "\uffa8\001\002\000\024\030\uffba\031\uffba\042\uffba\043\uffba" +
    "\052\uffba\055\uffba\064\uffba\065\uffba\066\uffba\001\002\000" +
    "\024\030\uffb9\031\uffb9\042\uffb9\043\uffb9\052\uffb9\055\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\001\002\000\024\030\uffbc\031" +
    "\uffbc\042\uffbc\043\uffbc\052\uffbc\055\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\001\002\000\024\030\uffbd\031\uffbd\042\uffbd\043" +
    "\uffbd\052\uffbd\055\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002" +
    "\000\024\030\036\031\044\042\043\043\046\052\052\055" +
    "\047\064\045\065\101\066\054\001\002\000\024\030\uffbb" +
    "\031\uffbb\042\uffbb\043\uffbb\052\uffbb\055\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\001\002\000\024\030\uffb8\031\uffb8\042\uffb8" +
    "\043\uffb8\052\uffb8\055\uffb8\064\uffb8\065\uffb8\066\uffb8\001" +
    "\002\000\056\002\uffa0\003\uffa0\004\uffa0\011\uffa0\012\uffa0" +
    "\021\uffa0\022\uffa0\024\uffa0\026\uffa0\030\112\031\114\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0" +
    "\054\uffa0\056\uffa0\061\uffa0\062\uffa0\001\002\000\024\030" +
    "\uffc2\031\uffc2\042\uffc2\043\uffc2\052\uffc2\055\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\001\002\000\024\030\036\031\044\042" +
    "\043\043\046\052\052\055\047\064\045\065\101\066\054" +
    "\001\002\000\024\030\uffc1\031\uffc1\042\uffc1\043\uffc1\052" +
    "\uffc1\055\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\064" +
    "\002\uff9e\003\uff9e\004\uff9e\011\uff9e\012\uff9e\021\uff9e\022" +
    "\uff9e\024\uff9e\026\uff9e\030\uff9e\031\uff9e\032\120\033\116" +
    "\034\121\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\053\uff9e\054\uff9e\056\uff9e\061\uff9e\062\uff9e\001\002" +
    "\000\024\030\uffc4\031\uffc4\042\uffc4\043\uffc4\052\uffc4\055" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002\000\024\030\036" +
    "\031\044\042\043\043\046\052\052\055\047\064\045\065" +
    "\101\066\054\001\002\000\024\030\uffc5\031\uffc5\042\uffc5" +
    "\043\uffc5\052\uffc5\055\uffc5\064\uffc5\065\uffc5\066\uffc5\001" +
    "\002\000\024\030\uffc3\031\uffc3\042\uffc3\043\uffc3\052\uffc3" +
    "\055\uffc3\064\uffc3\065\uffc3\066\uffc3\001\002\000\064\002" +
    "\uff9c\003\uff9c\004\uff9c\011\uff9c\012\uff9c\021\uff9c\022\uff9c" +
    "\024\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\053\uff9c\054\uff9c\056\uff9c\061\uff9c\062\uff9c\001\002\000" +
    "\006\056\126\061\127\001\002\000\064\002\uff91\003\uff91" +
    "\004\uff91\011\uff91\012\uff91\021\uff91\022\uff91\024\uff91\026" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\053\uff91\054" +
    "\uff91\056\uff91\061\uff91\062\uff91\001\002\000\006\056\uff64" +
    "\061\uff64\001\002\000\064\002\uff92\003\uff92\004\uff92\011" +
    "\uff92\012\uff92\021\uff92\022\uff92\024\uff92\026\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\051\uff92\053\uff92\054\uff92\056\uff92" +
    "\061\uff92\062\uff92\001\002\000\004\065\130\001\002\000" +
    "\006\056\uff63\061\uff63\001\002\000\004\056\132\001\002" +
    "\000\064\002\uff9a\003\uff9a\004\uff9a\011\uff9a\012\uff9a\021" +
    "\uff9a\022\uff9a\024\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\053\uff9a\054\uff9a\056\uff9a\061\uff9a\062\uff9a" +
    "\001\002\000\064\002\uff96\003\uff96\004\uff96\011\uff96\012" +
    "\uff96\021\uff96\022\uff96\024\uff96\026\uff96\030\uff96\031\uff96" +
    "\032\uff96\033\uff96\034\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\053\uff96\054\uff96\056\uff96\061\uff96" +
    "\062\uff96\001\002\000\064\002\uff95\003\uff95\004\uff95\011" +
    "\uff95\012\uff95\021\uff95\022\uff95\024\uff95\026\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\053\uff95\054\uff95\056\uff95" +
    "\061\uff95\062\uff95\001\002\000\022\003\026\004\025\011" +
    "\013\012\004\021\006\022\015\024\005\026\017\001\002" +
    "\000\004\002\ufff6\001\002\000\006\012\uffab\065\uffab\001" +
    "\002\000\024\030\036\031\044\042\043\043\046\052\052" +
    "\055\047\064\045\065\050\066\054\001\002\000\024\003" +
    "\016\004\014\011\013\012\004\021\006\022\015\024\005" +
    "\026\017\062\143\001\002\000\004\002\000\001\002\000" +
    "\022\003\016\004\014\011\013\012\004\021\006\022\015" +
    "\024\005\026\017\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002\000\004\065\302\001\002\000\004" +
    "\055\161\001\002\000\006\061\154\062\155\001\002\000" +
    "\012\041\152\055\uffe8\061\uffa7\062\uffa7\001\002\000\024" +
    "\030\036\031\044\042\043\043\046\052\052\055\047\064" +
    "\045\065\101\066\054\001\002\000\022\044\105\045\104" +
    "\046\107\047\102\050\103\051\110\061\uffa5\062\uffa5\001" +
    "\002\000\004\065\156\001\002\000\100\002\uffa3\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\042\uffa3\043\uffa3\052\uffa3\055\uffa3\060\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\001\002\000\010\041\157\061" +
    "\uffa6\062\uffa6\001\002\000\024\030\036\031\044\042\043" +
    "\043\046\052\052\055\047\064\045\065\101\066\054\001" +
    "\002\000\022\044\105\045\104\046\107\047\102\050\103" +
    "\051\110\061\uffa4\062\uffa4\001\002\000\016\011\013\021" +
    "\006\022\015\024\005\056\uffca\061\uffca\001\002\000\004" +
    "\065\u0121\001\002\000\006\056\164\061\165\001\002\000" +
    "\004\057\170\001\002\000\012\011\013\021\006\022\015" +
    "\024\005\001\002\000\004\065\167\001\002\000\006\056" +
    "\uffcb\061\uffcb\001\002\000\066\003\207\004\174\005\220" +
    "\006\176\007\200\011\013\012\004\013\214\015\212\017" +
    "\206\020\172\021\006\022\015\023\203\024\005\025\210" +
    "\027\204\030\036\031\044\042\043\043\046\052\052\055" +
    "\047\064\045\065\050\066\054\001\002\000\072\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\027\uffda\030\uffda\031\uffda\042" +
    "\uffda\043\uffda\052\uffda\055\uffda\060\uffda\064\uffda\065\uffda" +
    "\066\uffda\001\002\000\004\055\uff8a\001\002\000\066\004" +
    "\240\005\220\006\176\007\200\011\013\012\004\013\214" +
    "\015\212\017\206\020\172\021\006\022\015\023\203\024" +
    "\005\025\210\027\204\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\060\u0116\064\045\065\050\066\054\001" +
    "\002\000\004\065\u0113\001\002\000\072\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\042\uffd4\043" +
    "\uffd4\052\uffd4\055\uffd4\060\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\001\002\000\004\055\u010d\001\002\000\072\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde\042\uffde" +
    "\043\uffde\052\uffde\055\uffde\060\uffde\064\uffde\065\uffde\066" +
    "\uffde\001\002\000\004\062\u010c\001\002\000\072\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\042" +
    "\uffe2\043\uffe2\052\uffe2\055\uffe2\060\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\001\002\000\072\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\042\uffd6\043\uffd6\052\uffd6" +
    "\055\uffd6\060\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\026\030\036\031\044\042\043\043\046\052\052\055\047" +
    "\062\u0109\064\045\065\050\066\054\001\002\000\004\055" +
    "\uff81\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\254\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\027\uffdc\030\uffdc\031\uffdc\042\uffdc\043\uffdc\052" +
    "\uffdc\055\uffdc\060\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002" +
    "\000\004\055\uff7c\001\002\000\010\056\355\060\354\062" +
    "\356\001\002\000\004\055\uff78\001\002\000\006\012\146" +
    "\065\302\001\002\000\004\057\uff7e\001\002\000\072\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\042\uffd2\043\uffd2\052\uffd2\055\uffd2\060\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\001\002\000\004\062\232\001\002\000\072" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\042\uffe6\043\uffe6\052\uffe6\055\uffe6\060\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\001\002\000\072\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\042\uffe0\043\uffe0" +
    "\052\uffe0\055\uffe0\060\uffe0\064\uffe0\065\uffe0\066\uffe0\001" +
    "\002\000\072\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\042\uffd8\043\uffd8\052\uffd8\055\uffd8\060" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\004\055\223" +
    "\001\002\000\004\062\222\001\002\000\072\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\042\uffe4" +
    "\043\uffe4\052\uffe4\055\uffe4\060\uffe4\064\uffe4\065\uffe4\066" +
    "\uffe4\001\002\000\024\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\064\045\065\050\066\054\001\002\000" +
    "\006\056\226\061\227\001\002\000\006\056\uff66\061\uff66" +
    "\001\002\000\004\062\231\001\002\000\024\030\036\031" +
    "\044\042\043\043\046\052\052\055\047\064\045\065\050" +
    "\066\054\001\002\000\006\056\uff65\061\uff65\001\002\000" +
    "\072\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b" +
    "\031\uff8b\042\uff8b\043\uff8b\052\uff8b\055\uff8b\060\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\001\002\000\072\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\042\uffc6\043" +
    "\uffc6\052\uffc6\055\uffc6\060\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\001\002\000\004\057\234\001\002\000\066\003\207\004" +
    "\174\005\220\006\176\007\200\011\013\012\004\013\214" +
    "\015\212\017\206\020\172\021\006\022\015\023\203\024" +
    "\005\025\210\027\204\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\064\045\065\050\066\054\001\002\000" +
    "\066\004\240\005\220\006\176\007\200\011\013\012\004" +
    "\013\214\015\212\017\206\020\172\021\006\022\015\023" +
    "\203\024\005\025\210\027\204\030\036\031\044\042\043" +
    "\043\046\052\052\055\047\060\237\064\045\065\050\066" +
    "\054\001\002\000\072\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\042\uffdb\043\uffdb\052\uffdb\055" +
    "\uffdb\060\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000\004" +
    "\027\264\001\002\000\004\065\261\001\002\000\072\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\042\uffd5\043\uffd5\052\uffd5\055\uffd5\060\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\001\002\000\072\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\031\uffdf\042\uffdf\043\uffdf\052" +
    "\uffdf\055\uffdf\060\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002" +
    "\000\072\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\042\uffe3\043\uffe3\052\uffe3\055\uffe3\060\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\001\002\000\072\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\042\uffd7" +
    "\043\uffd7\052\uffd7\055\uffd7\060\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\001\002\000\074\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\254\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\027\uffdd\030\uffdd\031\uffdd\042\uffdd\043\uffdd\052" +
    "\uffdd\055\uffdd\060\uffdd\064\uffdd\065\uffdd\066\uffdd\001\002" +
    "\000\072\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\042\uffd3\043\uffd3\052\uffd3\055\uffd3\060\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\001\002\000\072\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\042\uffe7" +
    "\043\uffe7\052\uffe7\055\uffe7\060\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\001\002\000\072\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\042\uffe1\043\uffe1\052\uffe1\055" +
    "\uffe1\060\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000\072" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\042\uffd9\043\uffd9\052\uffd9\055\uffd9\060\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\004\062\253\001\002\000" +
    "\072\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\042\uffe5\043\uffe5\052\uffe5\055\uffe5\060\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\001\002\000\004\057\uff83\001\002" +
    "\000\004\057\256\001\002\000\066\003\207\004\174\005" +
    "\220\006\176\007\200\011\013\012\004\013\214\015\212" +
    "\017\206\020\172\021\006\022\015\023\203\024\005\025" +
    "\210\027\204\030\036\031\044\042\043\043\046\052\052" +
    "\055\047\064\045\065\050\066\054\001\002\000\066\004" +
    "\240\005\220\006\176\007\200\011\013\012\004\013\214" +
    "\015\212\017\206\020\172\021\006\022\015\023\203\024" +
    "\005\025\210\027\204\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\060\260\064\045\065\050\066\054\001" +
    "\002\000\072\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\017\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\027\uff82" +
    "\030\uff82\031\uff82\042\uff82\043\uff82\052\uff82\055\uff82\060" +
    "\uff82\064\uff82\065\uff82\066\uff82\001\002\000\024\030\036" +
    "\031\044\042\043\043\046\052\052\055\047\064\045\065" +
    "\050\066\054\001\002\000\004\062\263\001\002\000\072" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\042\uffd1\043\uffd1\052\uffd1\055\uffd1\060\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\001\002\000\004\055\265\001\002\000" +
    "\024\030\036\031\044\042\043\043\046\052\052\055\047" +
    "\064\045\065\267\066\054\001\002\000\026\044\105\045" +
    "\104\046\107\047\102\050\103\051\110\053\uff87\054\uff87" +
    "\056\uff87\062\uff87\001\002\000\060\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\067\043\070\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\055\066\056\uffa8" +
    "\062\uffa8\001\002\000\010\053\273\054\274\056\272\001" +
    "\002\000\024\030\036\031\044\042\043\043\046\052\052" +
    "\055\047\064\045\065\101\066\054\001\002\000\004\062" +
    "\275\001\002\000\024\030\uffb6\031\uffb6\042\uffb6\043\uffb6" +
    "\052\uffb6\055\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000" +
    "\024\030\uffb7\031\uffb7\042\uffb7\043\uffb7\052\uffb7\055\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\001\002\000\072\004\uff7d\005" +
    "\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\027\uff7d\030\uff7d\031\uff7d\042\uff7d" +
    "\043\uff7d\052\uff7d\055\uff7d\060\uff7d\064\uff7d\065\uff7d\066" +
    "\uff7d\001\002\000\026\044\105\045\104\046\107\047\102" +
    "\050\103\051\110\053\uff84\054\uff84\056\uff84\062\uff84\001" +
    "\002\000\014\035\076\036\072\037\073\040\074\041\077" +
    "\001\002\000\024\030\036\031\044\042\043\043\046\052" +
    "\052\055\047\064\045\065\101\066\054\001\002\000\026" +
    "\044\105\045\104\046\107\047\102\050\103\051\110\053" +
    "\uff85\054\uff85\056\uff85\062\uff85\001\002\000\010\041\152" +
    "\061\uffa7\062\uffa7\001\002\000\004\055\304\001\002\000" +
    "\024\030\036\031\044\042\043\043\046\052\052\055\047" +
    "\064\045\065\267\066\054\001\002\000\010\053\273\054" +
    "\274\056\306\001\002\000\004\057\307\001\002\000\010" +
    "\003\312\010\311\014\310\001\002\000\004\063\352\001" +
    "\002\000\016\030\036\031\044\052\052\055\322\064\320" +
    "\066\325\001\002\000\006\062\346\063\345\001\002\000" +
    "\010\010\316\014\315\060\314\001\002\000\072\004\uff77" +
    "\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013" +
    "\uff77\014\uff77\015\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\027\uff77\030\uff77\031\uff77\042" +
    "\uff77\043\uff77\052\uff77\055\uff77\060\uff77\064\uff77\065\uff77" +
    "\066\uff77\001\002\000\004\063\343\001\002\000\016\030" +
    "\036\031\044\052\052\055\322\064\320\066\325\001\002" +
    "\000\020\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\056" +
    "\uff6d\063\uff6d\001\002\000\020\030\uff69\031\uff69\032\uff69" +
    "\033\uff69\034\uff69\056\uff69\063\uff69\001\002\000\020\030" +
    "\uff6f\031\uff6f\032\120\033\116\034\121\056\uff6f\063\uff6f" +
    "\001\002\000\016\030\036\031\044\052\052\055\322\064" +
    "\320\066\325\001\002\000\010\030\112\031\114\063\337" +
    "\001\002\000\010\055\326\064\330\066\327\001\002\000" +
    "\020\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\056\uff67" +
    "\063\uff67\001\002\000\016\030\036\031\044\052\052\055" +
    "\322\064\320\066\325\001\002\000\020\030\uff68\031\uff68" +
    "\032\uff68\033\uff68\034\uff68\056\uff68\063\uff68\001\002\000" +
    "\020\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\056\uff6a" +
    "\063\uff6a\001\002\000\010\030\112\031\114\056\332\001" +
    "\002\000\020\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b" +
    "\056\uff6b\063\uff6b\001\002\000\016\030\036\031\044\052" +
    "\052\055\322\064\320\066\325\001\002\000\020\030\uff70" +
    "\031\uff70\032\120\033\116\034\121\056\uff70\063\uff70\001" +
    "\002\000\016\030\036\031\044\052\052\055\322\064\320" +
    "\066\325\001\002\000\020\030\uff6e\031\uff6e\032\uff6e\033" +
    "\uff6e\034\uff6e\056\uff6e\063\uff6e\001\002\000\066\003\207" +
    "\004\174\005\220\006\176\007\200\011\013\012\004\013" +
    "\214\015\212\017\206\020\172\021\006\022\015\023\203" +
    "\024\005\025\210\027\204\030\036\031\044\042\043\043" +
    "\046\052\052\055\047\064\045\065\050\066\054\001\002" +
    "\000\072\004\240\005\220\006\176\007\200\010\uff76\011" +
    "\013\012\004\013\214\014\uff76\015\212\017\206\020\172" +
    "\021\006\022\015\023\203\024\005\025\210\027\204\030" +
    "\036\031\044\042\043\043\046\052\052\055\047\060\uff76" +
    "\064\045\065\050\066\054\001\002\000\010\030\112\031" +
    "\114\056\342\001\002\000\020\030\uff6c\031\uff6c\032\uff6c" +
    "\033\uff6c\034\uff6c\056\uff6c\063\uff6c\001\002\000\066\003" +
    "\207\004\174\005\220\006\176\007\200\011\013\012\004" +
    "\013\214\015\212\017\206\020\172\021\006\022\015\023" +
    "\203\024\005\025\210\027\204\030\036\031\044\042\043" +
    "\043\046\052\052\055\047\064\045\065\050\066\054\001" +
    "\002\000\072\004\240\005\220\006\176\007\200\010\uff74" +
    "\011\013\012\004\013\214\014\uff74\015\212\017\206\020" +
    "\172\021\006\022\015\023\203\024\005\025\210\027\204" +
    "\030\036\031\044\042\043\043\046\052\052\055\047\060" +
    "\uff74\064\045\065\050\066\054\001\002\000\010\010\uff72" +
    "\014\uff72\060\uff72\001\002\000\010\010\uff71\014\uff71\060" +
    "\uff71\001\002\000\010\030\112\031\114\063\350\001\002" +
    "\000\066\003\207\004\174\005\220\006\176\007\200\011" +
    "\013\012\004\013\214\015\212\017\206\020\172\021\006" +
    "\022\015\023\203\024\005\025\210\027\204\030\036\031" +
    "\044\042\043\043\046\052\052\055\047\064\045\065\050" +
    "\066\054\001\002\000\072\004\240\005\220\006\176\007" +
    "\200\010\uff75\011\013\012\004\013\214\014\uff75\015\212" +
    "\017\206\020\172\021\006\022\015\023\203\024\005\025" +
    "\210\027\204\030\036\031\044\042\043\043\046\052\052" +
    "\055\047\060\uff75\064\045\065\050\066\054\001\002\000" +
    "\066\003\207\004\174\005\220\006\176\007\200\011\013" +
    "\012\004\013\214\015\212\017\206\020\172\021\006\022" +
    "\015\023\203\024\005\025\210\027\204\030\036\031\044" +
    "\042\043\043\046\052\052\055\047\064\045\065\050\066" +
    "\054\001\002\000\072\004\240\005\220\006\176\007\200" +
    "\010\uff73\011\013\012\004\013\214\014\uff73\015\212\017" +
    "\206\020\172\021\006\022\015\023\203\024\005\025\210" +
    "\027\204\030\036\031\044\042\043\043\046\052\052\055" +
    "\047\060\uff73\064\045\065\050\066\054\001\002\000\072" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\031" +
    "\uffce\042\uffce\043\uffce\052\uffce\055\uffce\060\uffce\064\uffce" +
    "\065\uffce\066\uffce\001\002\000\072\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\042\uffcd\043\uffcd" +
    "\052\uffcd\055\uffcd\060\uffcd\064\uffcd\065\uffcd\066\uffcd\001" +
    "\002\000\072\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\042\uffcf\043\uffcf\052\uffcf\055\uffcf\060" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\004\055\360" +
    "\001\002\000\014\011\013\021\006\022\015\024\005\065" +
    "\302\001\002\000\004\056\375\001\002\000\004\065\302" +
    "\001\002\000\006\061\154\062\364\001\002\000\024\030" +
    "\036\031\044\042\043\043\046\052\052\055\047\064\045" +
    "\065\267\066\054\001\002\000\010\053\273\054\274\062" +
    "\366\001\002\000\024\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\064\045\065\050\066\054\001\002\000" +
    "\006\056\uff79\061\227\001\002\000\006\061\154\062\371" +
    "\001\002\000\024\030\036\031\044\042\043\043\046\052" +
    "\052\055\047\064\045\065\267\066\054\001\002\000\010" +
    "\053\273\054\274\062\373\001\002\000\024\030\036\031" +
    "\044\042\043\043\046\052\052\055\047\064\045\065\050" +
    "\066\054\001\002\000\006\056\uff7a\061\227\001\002\000" +
    "\004\057\376\001\002\000\066\003\207\004\174\005\220" +
    "\006\176\007\200\011\013\012\004\013\214\015\212\017" +
    "\206\020\172\021\006\022\015\023\203\024\005\025\210" +
    "\027\204\030\036\031\044\042\043\043\046\052\052\055" +
    "\047\064\045\065\050\066\054\001\002\000\066\004\240" +
    "\005\220\006\176\007\200\011\013\012\004\013\214\015" +
    "\212\017\206\020\172\021\006\022\015\023\203\024\005" +
    "\025\210\027\204\030\036\031\044\042\043\043\046\052" +
    "\052\055\047\060\u0100\064\045\065\050\066\054\001\002" +
    "\000\072\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\042\uff7b\043\uff7b\052\uff7b\055\uff7b\060\uff7b" +
    "\064\uff7b\065\uff7b\066\uff7b\001\002\000\004\055\u0102\001" +
    "\002\000\024\030\036\031\044\042\043\043\046\052\052" +
    "\055\047\064\045\065\267\066\054\001\002\000\010\053" +
    "\273\054\274\056\u0104\001\002\000\004\057\uff80\001\002" +
    "\000\004\057\u0106\001\002\000\066\003\207\004\174\005" +
    "\220\006\176\007\200\011\013\012\004\013\214\015\212" +
    "\017\206\020\172\021\006\022\015\023\203\024\005\025" +
    "\210\027\204\030\036\031\044\042\043\043\046\052\052" +
    "\055\047\064\045\065\050\066\054\001\002\000\066\004" +
    "\240\005\220\006\176\007\200\011\013\012\004\013\214" +
    "\015\212\017\206\020\172\021\006\022\015\023\203\024" +
    "\005\025\210\027\204\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\060\u0108\064\045\065\050\066\054\001" +
    "\002\000\072\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\017\uff7f\020" +
    "\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\042\uff7f\043\uff7f\052\uff7f\055\uff7f\060" +
    "\uff7f\064\uff7f\065\uff7f\066\uff7f\001\002\000\072\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\042" +
    "\uffc8\043\uffc8\052\uffc8\055\uffc8\060\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\004\062\u010b\001\002\000\072\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\042\uffc9\043\uffc9\052\uffc9\055\uffc9\060\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\072\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\027\uffc7\030\uffc7\031\uffc7\042\uffc7\043\uffc7\052" +
    "\uffc7\055\uffc7\060\uffc7\064\uffc7\065\uffc7\066\uffc7\001\002" +
    "\000\006\056\u010f\065\125\001\002\000\006\056\u0111\061" +
    "\127\001\002\000\004\062\u0110\001\002\000\072\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d\042" +
    "\uff8d\043\uff8d\052\uff8d\055\uff8d\060\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\001\002\000\004\062\u0112\001\002\000\072\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\042\uff8c\043\uff8c\052\uff8c\055\uff8c\060\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\001\002\000\024\030\036\031\044\042\043" +
    "\043\046\052\052\055\047\064\045\065\050\066\054\001" +
    "\002\000\004\062\u0115\001\002\000\072\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\042\uffd0\043" +
    "\uffd0\052\uffd0\055\uffd0\060\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\001\002\000\024\002\uffef\003\uffed\004\uffed\011\uffed\012" +
    "\uffed\021\uffed\022\uffed\024\uffed\026\uffed\001\002\000\022" +
    "\003\026\004\025\011\013\012\004\021\006\022\015\024" +
    "\005\026\017\001\002\000\004\002\uffec\001\002\000\004" +
    "\055\u011a\001\002\000\024\030\036\031\044\042\043\043" +
    "\046\052\052\055\047\064\045\065\267\066\054\001\002" +
    "\000\010\053\273\054\274\056\u011c\001\002\000\004\057" +
    "\uff89\001\002\000\004\057\u011e\001\002\000\066\003\207" +
    "\004\174\005\220\006\176\007\200\011\013\012\004\013" +
    "\214\015\212\017\206\020\172\021\006\022\015\023\203" +
    "\024\005\025\210\027\204\030\036\031\044\042\043\043" +
    "\046\052\052\055\047\064\045\065\050\066\054\001\002" +
    "\000\066\004\240\005\220\006\176\007\200\011\013\012" +
    "\004\013\214\015\212\017\206\020\172\021\006\022\015" +
    "\023\203\024\005\025\210\027\204\030\036\031\044\042" +
    "\043\043\046\052\052\055\047\060\u0120\064\045\065\050" +
    "\066\054\001\002\000\074\004\uff88\005\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024" +
    "\uff88\025\uff88\027\uff88\030\uff88\031\uff88\042\uff88\043\uff88" +
    "\052\uff88\055\uff88\060\uff88\064\uff88\065\uff88\066\uff88\001" +
    "\002\000\006\056\uffcc\061\uffcc\001\002\000\006\061\154" +
    "\062\u0123\001\002\000\100\002\uffa2\003\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\042\uffa2\043\uffa2\052\uffa2\055\uffa2\060\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\001\002\000\022\003\016\004\014\011\013" +
    "\012\004\021\006\022\015\024\005\026\017\001\002\000" +
    "\004\002\ufffd\001\002\000\004\055\u0128\001\002\000\004" +
    "\055\uffe8\001\002\000\016\011\013\021\006\022\015\024" +
    "\005\056\uffca\061\uffca\001\002\000\006\056\u012a\061\165" +
    "\001\002\000\004\057\u012b\001\002\000\066\003\207\004" +
    "\174\005\220\006\176\007\200\011\013\012\004\013\214" +
    "\015\212\017\206\020\172\021\006\022\015\023\203\024" +
    "\005\025\210\027\204\030\036\031\044\042\043\043\046" +
    "\052\052\055\047\064\045\065\050\066\054\001\002\000" +
    "\066\004\240\005\220\006\176\007\200\011\013\012\004" +
    "\013\214\015\212\017\206\020\172\021\006\022\015\023" +
    "\203\024\005\025\210\027\204\030\036\031\044\042\043" +
    "\043\046\052\052\055\047\060\u012d\064\045\065\050\066" +
    "\054\001\002\000\024\002\uffee\003\uffeb\004\uffeb\011\uffeb" +
    "\012\uffeb\021\uffeb\022\uffeb\024\uffeb\026\uffeb\001\002\000" +
    "\022\003\026\004\025\011\013\012\004\021\006\022\015" +
    "\024\005\026\017\001\002\000\004\002\uffea\001\002\000" +
    "\006\012\uffac\065\uffac\001\002\000\004\065\302\001\002" +
    "\000\006\061\154\062\u0133\001\002\000\100\002\uffa1\003" +
    "\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\042\uffa1\043\uffa1\052\uffa1\055\uffa1\060" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\014\002\017\013\010\016\007\040\011\050" +
    "\006\001\001\000\004\013\u0130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0125\001\001\000\004\051" +
    "\u0123\001\001\000\006\015\147\047\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\026\013\010\016\023\041\027\050\006\001" +
    "\001\000\014\002\017\013\010\016\007\040\022\050\006" +
    "\001\001\000\002\001\001\000\004\052\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\026\013\010\016\023\041\033\050" +
    "\006\001\001\000\014\002\026\013\010\016\023\041\032" +
    "\050\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\052\014\050\017\040\020\037\021\036\022\041" +
    "\023\054\001\001\000\002\001\001\000\004\005\116\001" +
    "\001\000\004\006\112\001\001\000\004\010\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\052\014\050" +
    "\017\040\020\037\021\036\022\041\023\130\001\001\000" +
    "\004\055\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\062\001\001\000\002\001\001\000\014\002" +
    "\026\013\010\016\023\041\056\050\006\001\001\000\014" +
    "\002\026\013\010\016\023\041\057\050\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\052\014\050" +
    "\017\040\020\037\021\036\022\041\023\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\052\014" +
    "\050\017\077\020\037\021\036\022\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\052\014\050\020" +
    "\110\021\036\022\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\112\001\001\000\002\001\001\000" +
    "\012\007\052\014\050\021\114\022\041\001\001\000\002" +
    "\001\001\000\004\005\116\001\001\000\002\001\001\000" +
    "\010\007\052\014\050\022\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\026" +
    "\013\010\016\023\041\135\050\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\052\014\050\017\040" +
    "\020\037\021\036\022\041\023\140\001\001\000\014\002" +
    "\017\013\010\016\007\040\141\050\006\001\001\000\002" +
    "\001\001\000\014\002\017\013\010\016\007\040\143\050" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\052\014\050\017\152\020\037" +
    "\021\036\022\041\001\001\000\004\010\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\052\014\050\017\157\020\037\021\036\022\041\001" +
    "\001\000\004\010\105\001\001\000\006\004\162\013\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\172\007\052\013\210\014\050\016" +
    "\214\017\040\020\037\021\036\022\041\023\220\024\204" +
    "\025\170\026\200\027\216\030\201\034\174\035\215\036" +
    "\176\042\212\001\001\000\002\001\001\000\004\056\u0118" +
    "\001\001\000\046\007\052\013\210\014\050\016\246\017" +
    "\040\020\037\021\036\022\041\023\251\024\244\025\235" +
    "\026\242\027\250\030\243\034\240\035\247\036\241\042" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\052\014\050\017\040" +
    "\020\037\021\036\022\041\023\u0109\001\001\000\004\062" +
    "\u0100\001\001\000\002\001\001\000\004\065\356\001\001" +
    "\000\002\001\001\000\004\066\302\001\001\000\004\015" +
    "\147\001\001\000\004\064\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\052\014\050\017\040\020\037\021" +
    "\036\022\041\023\224\033\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\052\014" +
    "\050\017\040\020\037\021\036\022\041\023\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\234\007\052\013\210\014\050" +
    "\016\214\017\040\020\037\021\036\022\041\023\220\024" +
    "\204\025\170\026\200\027\216\030\201\034\174\035\215" +
    "\036\176\042\212\001\001\000\046\007\052\013\210\014" +
    "\050\016\246\017\040\020\037\021\036\022\041\023\251" +
    "\024\244\025\235\026\242\027\250\030\243\034\240\035" +
    "\247\036\241\042\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\254\001\001\000\002\001\001\000\050\003\256\007" +
    "\052\013\210\014\050\016\214\017\040\020\037\021\036" +
    "\022\041\023\220\024\204\025\170\026\200\027\216\030" +
    "\201\034\174\035\215\036\176\042\212\001\001\000\046" +
    "\007\052\013\210\014\050\016\246\017\040\020\037\021" +
    "\036\022\041\023\251\024\244\025\235\026\242\027\250" +
    "\030\243\034\240\035\247\036\241\042\245\001\001\000" +
    "\002\001\001\000\020\007\052\014\050\017\040\020\037" +
    "\021\036\022\041\023\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\052\014\050" +
    "\017\265\020\037\021\036\022\041\031\267\001\001\000" +
    "\004\010\105\001\001\000\004\060\276\001\001\000\004" +
    "\011\270\001\001\000\016\007\052\014\050\017\275\020" +
    "\037\021\036\022\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\105\001\001\000\004\012\277\001\001\000\016\007\052" +
    "\014\050\017\300\020\037\021\036\022\041\001\001\000" +
    "\004\010\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\052\014\050\017\265\020\037\021\036\022" +
    "\041\031\304\001\001\000\004\011\270\001\001\000\002" +
    "\001\001\000\004\043\312\001\001\000\002\001\001\000" +
    "\012\007\323\044\346\045\320\046\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\323\044\322\045\320\046\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\334\001" +
    "\001\000\012\007\323\044\340\045\320\046\316\001\001" +
    "\000\004\006\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\323\044\330\045\320\046\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\332\001" +
    "\001\000\002\001\001\000\010\007\323\045\333\046\316" +
    "\001\001\000\004\005\334\001\001\000\006\007\323\046" +
    "\335\001\001\000\002\001\001\000\050\003\337\007\052" +
    "\013\210\014\050\016\214\017\040\020\037\021\036\022" +
    "\041\023\220\024\204\025\170\026\200\027\216\030\201" +
    "\034\174\035\215\036\176\042\212\001\001\000\046\007" +
    "\052\013\210\014\050\016\246\017\040\020\037\021\036" +
    "\022\041\023\251\024\244\025\235\026\242\027\250\030" +
    "\243\034\240\035\247\036\241\042\245\001\001\000\004" +
    "\006\332\001\001\000\002\001\001\000\050\003\343\007" +
    "\052\013\210\014\050\016\214\017\040\020\037\021\036" +
    "\022\041\023\220\024\204\025\170\026\200\027\216\030" +
    "\201\034\174\035\215\036\176\042\212\001\001\000\046" +
    "\007\052\013\210\014\050\016\246\017\040\020\037\021" +
    "\036\022\041\023\251\024\244\025\235\026\242\027\250" +
    "\030\243\034\240\035\247\036\241\042\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\332\001\001" +
    "\000\050\003\350\007\052\013\210\014\050\016\214\017" +
    "\040\020\037\021\036\022\041\023\220\024\204\025\170" +
    "\026\200\027\216\030\201\034\174\035\215\036\176\042" +
    "\212\001\001\000\046\007\052\013\210\014\050\016\246" +
    "\017\040\020\037\021\036\022\041\023\251\024\244\025" +
    "\235\026\242\027\250\030\243\034\240\035\247\036\241" +
    "\042\245\001\001\000\050\003\352\007\052\013\210\014" +
    "\050\016\214\017\040\020\037\021\036\022\041\023\220" +
    "\024\204\025\170\026\200\027\216\030\201\034\174\035" +
    "\215\036\176\042\212\001\001\000\046\007\052\013\210" +
    "\014\050\016\246\017\040\020\037\021\036\022\041\023" +
    "\251\024\244\025\235\026\242\027\250\030\243\034\240" +
    "\035\247\036\241\042\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\361\015\362\032\360\001\001\000\002\001\001\000" +
    "\004\015\367\001\001\000\002\001\001\000\020\007\052" +
    "\014\050\017\265\020\037\021\036\022\041\031\364\001" +
    "\001\000\004\011\270\001\001\000\022\007\052\014\050" +
    "\017\040\020\037\021\036\022\041\023\224\033\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\052" +
    "\014\050\017\265\020\037\021\036\022\041\031\371\001" +
    "\001\000\004\011\270\001\001\000\022\007\052\014\050" +
    "\017\040\020\037\021\036\022\041\023\224\033\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\376" +
    "\007\052\013\210\014\050\016\214\017\040\020\037\021" +
    "\036\022\041\023\220\024\204\025\170\026\200\027\216" +
    "\030\201\034\174\035\215\036\176\042\212\001\001\000" +
    "\046\007\052\013\210\014\050\016\246\017\040\020\037" +
    "\021\036\022\041\023\251\024\244\025\235\026\242\027" +
    "\250\030\243\034\240\035\247\036\241\042\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\052\014" +
    "\050\017\265\020\037\021\036\022\041\031\u0102\001\001" +
    "\000\004\011\270\001\001\000\004\063\u0104\001\001\000" +
    "\002\001\001\000\050\003\u0106\007\052\013\210\014\050" +
    "\016\214\017\040\020\037\021\036\022\041\023\220\024" +
    "\204\025\170\026\200\027\216\030\201\034\174\035\215" +
    "\036\176\042\212\001\001\000\046\007\052\013\210\014" +
    "\050\016\246\017\040\020\037\021\036\022\041\023\251" +
    "\024\244\025\235\026\242\027\250\030\243\034\240\035" +
    "\247\036\241\042\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\052\014\050\017\040\020\037\021\036" +
    "\022\041\023\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u0116\001\001\000\014\002\026\013\010" +
    "\016\023\041\u0117\050\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\052\014\050\017\265\020\037" +
    "\021\036\022\041\031\u011a\001\001\000\004\011\270\001" +
    "\001\000\004\057\u011c\001\001\000\002\001\001\000\050" +
    "\003\u011e\007\052\013\210\014\050\016\214\017\040\020" +
    "\037\021\036\022\041\023\220\024\204\025\170\026\200" +
    "\027\216\030\201\034\174\035\215\036\176\042\212\001" +
    "\001\000\046\007\052\013\210\014\050\016\246\017\040" +
    "\020\037\021\036\022\041\023\251\024\244\025\235\026" +
    "\242\027\250\030\243\034\240\035\247\036\241\042\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\017\013\010\016\007" +
    "\040\u0124\050\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\u0128\013\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\u012b\007" +
    "\052\013\210\014\050\016\214\017\040\020\037\021\036" +
    "\022\041\023\220\024\204\025\170\026\200\027\216\030" +
    "\201\034\174\035\215\036\176\042\212\001\001\000\046" +
    "\007\052\013\210\014\050\016\246\017\040\020\037\021" +
    "\036\022\041\023\251\024\244\025\235\026\242\027\250" +
    "\030\243\034\240\035\247\036\241\042\245\001\001\000" +
    "\004\054\u012d\001\001\000\014\002\026\013\010\016\023" +
    "\041\u012e\050\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0131\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<Symbol> s = new ArrayList<Symbol>();
    
    public void syntax_error(Symbol s){
        this.s.add(s);
    }

    public ArrayList<Symbol> getS(){
        return this.s;
    }
    
    protected final static int _error_sync_size = 3;
    protected int error_sync_size( ) {
        return _error_sync_size;
    }

    public TablaSimbolos tabla = TablaSimbolos.getInstance();
    public PilaSemantica pila = PilaSemantica.getInstance();
    public String rutaEnsamblador = "D:/RepoVR/ProyectoCompi/Compi/src/compi/archivoAnalisis.asm";
    public int contador = 0;
    public int contadorBreak = 0;
    public int contadorContinue = 0;
    
    public void GuardarRS_Tipo(String Tipo){
        RS_Tipo tipo = new RS_Tipo(Tipo);
        this.pila.Push(tipo);
    }

    public void GuardarRS_Var(String Id, int Line, int Column){
        RS_Var var = new RS_Var(Id,Line,Column);
        this.pila.Push(var);
    }
    
    public void GuardarRS_Param(String Id, int Line, int Column){
        RS_Param param = new RS_Param(Id,Line,Column);
        this.pila.Push(param);
    }

    public void BuscarSimbolo(String Id, int Line, int Column, String Ambito){
        RegistroTS a = this.tabla.BuscarSimboloDeclarado(Id, Ambito);
        if(a==null){
            System.out.println("\u001B[31mError semantico. Linea: " + Line + " Columna: " + Column +  " No ha sido declarado el identificador \""+Id+"\"\u001B[31m");
        }
    }
    
    public void ValidarLlamadaFunc(String Id, int Line, int Column){
        this.pila.ValidarLlamadaFunc(Id, Line, Column);
    }

    public Boolean init = true; 
    public Boolean initFunc = true; 
    public void GuardarDeclaracionTS(String Ambito){
        if(Ambito.equals("Funcion") && initFunc == true){
            try{
                FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
                escritorEnsamblador.write("\nsection .text"+  "\nglobal _start\n_start:\n\n");
                escritorEnsamblador.close();
            }
            catch (IOException e){
                e.printStackTrace();
            }
            initFunc = false;
        }
        if(init == true){
            try{
                FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
                escritorEnsamblador.write("section .data"+  "\n");
                escritorEnsamblador.close();
            }
            catch (IOException e){
                e.printStackTrace();
            }
            init = false;
        }
        this.pila.GuardarVariable(Ambito);
    }

    public void StartWhile(){
        this.contadorBreak++;
        this.contadorContinue++;
        try{
            FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
            String label1 =  "while_label" + Integer.toString(this.contador);
            String label2 =  "exit_label" + Integer.toString(this.contador); 
            RS_While rs_while = new RS_While(label1,label2);
            escritorEnsamblador.write("\n"+rs_while.label1 + ":" + "\n");
            escritorEnsamblador.close();
            this.pila.Push(rs_while);
            this.contador++;
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    public void TestWhile(){
        try{
            FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
            RS_DO exp = (RS_DO) this.pila.Pop();
            RS_While rs_while = pila.BuscarRS_While();
            escritorEnsamblador.write(exp.Valor+" " + rs_while.label2 + "\n");
            escritorEnsamblador.close();
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    public void EndWhile(){
        this.contadorBreak--;
        this.contadorContinue--;
        try{
            FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
            RS_While rs_while = pila.BuscarRS_While();
            escritorEnsamblador.write("jmp " + rs_while.label1 + "\n");
            escritorEnsamblador.write("\n"+rs_while.label2 + ":" + "\n");
            escritorEnsamblador.close();
            this.pila.EndWhile();
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    public void ValidarBreak(int Line, int Column){
        if(contadorBreak <= 0){
            System.out.println("\u001B[31mError semantico. Linea: " + Line + " Columna: " + Column +  " El break no se encuentra en una estructura de control valida\u001B[31m");
        }
    }
    
    public void ValidarContinue(int Line, int Column){
        if(contadorContinue <= 0){
            System.out.println("\u001B[31mError semantico. Linea: " + Line + " Columna: " + Column +  " El continue no se encuentra en una estructura de control valida\u001B[31m");
        }
    }

    public void StartIf(String Else_label, String Exit_label){
        RS_If if_else = new RS_If(Else_label,Exit_label,contador);
        this.pila.Push(if_else);
        this.contador++;
    }

    public void TestIf(){
        try{

            FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
            RS_DO exp = (RS_DO) this.pila.Pop();
            RS_If if_else = this.pila.BuscarRSIf();
            escritorEnsamblador.write(exp.Valor+" " + if_else.Else_label + "\n");
            escritorEnsamblador.close();
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    public void StartElse(){
        try{
            FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
            RS_If if_else = this.pila.BuscarRSIf();
            escritorEnsamblador.write("jmp " + if_else.Exit_label + "\n");
            escritorEnsamblador.write("\n"+if_else.Else_label + ":" + "\n");
            escritorEnsamblador.close();
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    public void RecuerdaConstante(String Valor, String Tipo){
        int val = 0;
        if(Tipo=="Numero"){
           val = Integer.parseInt(Valor);
        }
        else if(Tipo=="Char"){
           val = Valor.toString().charAt(1);
        } 
        RS_DO rs_do = new RS_DO(Tipo,val+"");
        this.pila.Push(rs_do);
    }

    public void AddPrefix(String val){
        this.pila.AddPrefix(val);
    }
    
    public void RecuerdaOP(String Valor){
        RS_Operador rs_op = new RS_Operador(Valor);
        this.pila.Push(rs_op);
    }
    public void RecuerdaVariable(String Valor, String Tipo){ 
        RS_DO rs_do = new RS_DO(Tipo,"["+Valor+"]");
        this.pila.Push(rs_do);
    }
    public void EvalOP(){ 
        this.pila.EvalOP();
    }
    public void EvalOPUnaria(int op){ 
        this.pila.EvalOPUnaria(op);
    }

    public void EndIf(){
        try{
            FileWriter escritorEnsamblador = new FileWriter(rutaEnsamblador,true);
            RS_If if_else = this.pila.BuscarRSIf();
            escritorEnsamblador.write("\n"+if_else.Exit_label + ":" + "\n");
            escritorEnsamblador.close();
            this.pila.EndIf();
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES Coma Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.GuardarRS_Param(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.GuardarRS_Param(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES Coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONSTANT_FACTOR ::= LiteralChar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONSTANT_FACTOR ::= DATO_PREFIX LiteralChar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONSTANT_FACTOR ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONSTANT_FACTOR ::= DATO_PREFIX Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONSTANT_FACTOR ::= DATO_PREFIX ParentesisA OPERACION_SWITCH1 ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONSTANT_FACTOR ::= ParentesisA OPERACION_SWITCH1 ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT_FACTOR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACION_SWITCH2 ::= CONSTANT_FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACION_SWITCH2 ::= OPERACION_SWITCH2 OPERADOR_ARITMETICO2 CONSTANT_FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERACION_SWITCH1 ::= OPERACION_SWITCH2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH1",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERACION_SWITCH1 ::= OPERACION_SWITCH1 OPERADOR_ARITMETICO1 OPERACION_SWITCH2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SWITCH1",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ETIQUETA_SWITCH ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ETIQUETA_SWITCH ::= error DosPuntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ETIQUETA_SWITCH ::= Default DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ETIQUETA_SWITCH ::= ETIQUETA_SWITCH Default DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ETIQUETA_SWITCH ::= Case OPERACION_SWITCH1 DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ETIQUETA_SWITCH ::= ETIQUETA_SWITCH Case OPERACION_SWITCH1 DosPuntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ETIQUETA_SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SWITCH ::= Switch NT$13 ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA ETIQUETA_SWITCH LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 parser.contadorBreak--; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$13 ::= 
            {
              Object RESULT =null;
 parser.contadorBreak++; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_FOR ::= DECLARACION_LIST PuntoComa SENTENCIA_BOOLEANA PuntoComa LISTA_EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_FOR ::= TIPO_DATO DECLARACION_LIST PuntoComa SENTENCIA_BOOLEANA PuntoComa LISTA_EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FOR ::= For NT$12 ParentesisA SENTENCIA_FOR ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 parser.contadorBreak--;
    parser.contadorContinue--; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.contadorBreak++;
    parser.contadorContinue++; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DO_WHILE ::= Do NT$11 LlaveA SENTENCIA LlaveC While ParentesisA SENTENCIA_BOOLEANA ParentesisC PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		 parser.contadorBreak--;
    parser.contadorContinue--; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.contadorBreak++;
    parser.contadorContinue++; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WHILE ::= While NT$9 ParentesisA SENTENCIA_BOOLEANA ParentesisC NT$10 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 parser.EndWhile(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 parser.TestWhile(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.StartWhile(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF_ELSE ::= IF Else NT$8 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 parser.EndIf(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.StartElse(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA OPERADOR_OR_AND OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_BOOLEANA ::= Identificador NT$7 OPERADOR_ASIG OPERACION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$7 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_BOOLEANA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IF ::= If NT$5 ParentesisA SENTENCIA_BOOLEANA ParentesisC NT$6 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 parser.TestIf(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.StartIf("else_label","exit_label"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WRITE ::= Write ParentesisA LISTA_EXPRESIONES ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // READ ::= Read ParentesisA LISTA_IDENTIFICADORES ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // READ ::= Read ParentesisA ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= Identificador NT$4 OPERADOR_ASIG OPERACION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 parser.EvalOP(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$4 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FACTOR ::= Identificador ParentesisA ParentesisC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.ValidarLlamadaFunc(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FACTOR ::= Identificador ParentesisA LISTA_IDENTIFICADORES ParentesisC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 parser.ValidarLlamadaFunc(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FACTOR ::= Identificador OperadorIncremento 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); parser.EvalOPUnaria(1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FACTOR ::= Identificador OperadorDecremento 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); parser.EvalOPUnaria(2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FACTOR ::= OperadorIncremento Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); parser.EvalOPUnaria(1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FACTOR ::= OperadorDecremento Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); parser.EvalOPUnaria(2); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FACTOR ::= DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FACTOR ::= DATO_PREFIX DATO 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.AddPrefix(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FACTOR ::= DATO_PREFIX ParentesisA EXPRESION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FACTOR ::= ParentesisA EXPRESION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION2 ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION2 ::= OPERACION2 OPERADOR_ARITMETICO2 FACTOR 
            {
              Object RESULT =null;
		 parser.EvalOP(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION2",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION1 ::= OPERACION2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION1",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACION1 ::= OPERACION1 OPERADOR_ARITMETICO1 OPERACION2 
            {
              Object RESULT =null;
		 parser.EvalOP(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION1",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACION ::= OPERACION1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACION ::= OPERACION OPERADOR_BOOL OPERACION1 
            {
              Object RESULT =null;
		 parser.EvalOP(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= Const TIPO_DATO DECLARACION_LIST PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= TIPO_DATO Const DECLARACION_LIST PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= TIPO_DATO DECLARACION_LIST PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_LIST ::= DECLARACION_LIST Coma Identificador OperadorAsignacion OPERACION 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION_LIST ::= Identificador OperadorAsignacion OPERACION 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_LIST ::= DECLARACION_LIST Coma Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION_LIST ::= Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DATO ::= Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.BuscarSimbolo(v1.toString(),v1right +1,v1left +1, "Local"); 
    parser.RecuerdaVariable(v1.toString(),"Direccion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DATO ::= Int 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaConstante(v1.toString(),"Numero"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DATO ::= LiteralChar 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaConstante(v1.toString(),"Char"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO_DATO ::= Long Integer 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("long int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO_DATO ::= Short Integer 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("short int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO_DATO ::= Short 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("short"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO_DATO ::= Long 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("long"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO_DATO ::= Integer 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO_DATO ::= Char 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("char"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADOR_ASIG ::= OperadorAsignacionDiv 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADOR_ASIG ::= OperadorAsignacionMul 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADOR_ASIG ::= OperadorAsignacionResta 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADOR_ASIG ::= OperadorAsignacionSuma 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADOR_ASIG ::= OperadorAsignacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADOR_OR_AND ::= OperadorAnd 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_OR_AND",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADOR_OR_AND ::= OperadorOr 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_OR_AND",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADOR_BOOL ::= OperadorDiferencia 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADOR_BOOL ::= OperadorMenorIgual 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADOR_BOOL ::= OperadorMayorIgual 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADOR_BOOL ::= OperadorMayor 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR_BOOL ::= OperadorMenor 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR_BOOL ::= OperadorComparacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DATO_PREFIX ::= OperadorNegacion 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=v1.toString(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_PREFIX",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DATO_PREFIX ::= OperadorResta 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=v1.toString(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_PREFIX",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DATO_PREFIX ::= OperadorSuma 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=v1.toString(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_PREFIX",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR_ARITMETICO1 ::= OperadorResta 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR_ARITMETICO1 ::= OperadorSuma 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO1",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERADOR_ARITMETICO2 ::= OperadorMod 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO2",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADOR_ARITMETICO2 ::= OperadorDiv 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO2",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADOR_ARITMETICO2 ::= OperadorMulti 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.RecuerdaOP(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO2",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCIONES_CONTROL ::= Continue PuntoComa 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.ValidarContinue(v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCIONES_CONTROL ::= Break PuntoComa 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.ValidarBreak(v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCIONES_CONTROL ::= Return PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCIONES_CONTROL ::= Return EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_CONTROL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROS ::= PARAMETROS Coma TIPO_DATO Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1);
    parser.GuardarDeclaracionTS("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS ::= TIPO_DATO Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1);
    parser.GuardarDeclaracionTS("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= error ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= Define Identificador EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= SENTENCIA Define Identificador EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= INSTRUCCIONES_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA INSTRUCCIONES_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		 parser.GuardarDeclaracionTS("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		 parser.GuardarDeclaracionTS("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NOMBRE_FUNCION ::= Identificador 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.GuardarRS_Var(v1.toString(),v1right +1,v1left +1);
    parser.GuardarDeclaracionTS("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_FUNCION",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO_FUNCION ::= Void 
            {
              Object RESULT =null;
		 parser.GuardarRS_Tipo("void"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCION ::= TIPO_DATO_FUNCION NOMBRE_FUNCION ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC NT$3 INICIO_B 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.tabla.TerminaFuncion(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= TIPO_DATO NOMBRE_FUNCION ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC NT$2 INICIO_B 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.tabla.TerminaFuncion(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= TIPO_DATO_FUNCION NOMBRE_FUNCION ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
		 parser.tabla.TerminaFuncion(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= TIPO_DATO NOMBRE_FUNCION ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
		 parser.tabla.TerminaFuncion(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO_B ::= error PuntoComa INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO_B ::= error LlaveC INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO_B ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO_B ::= DECLARACION 
            {
              Object RESULT =null;
		 parser.GuardarDeclaracionTS("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO_B ::= Define Identificador EXPRESION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO_B ::= Define Identificador EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO_B ::= DECLARACION NT$1 INICIO_B 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.GuardarDeclaracionTS("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO_B ::= Define Identificador EXPRESION PuntoComa INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO_B ::= Define Identificador EXPRESION INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_B",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error PuntoComa INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error LlaveC INICIO_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= DECLARACION NT$0 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.GuardarDeclaracionTS("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Define Identificador EXPRESION PuntoComa INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Define Identificador EXPRESION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

