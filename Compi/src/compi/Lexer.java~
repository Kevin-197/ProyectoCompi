/* The following code was generated by JFlex 1.6.1 */

package compi;

import static compi.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/NetBeansProjects/Compi/src/compi/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\10\1\11\1\11\1\10\22\0\1\6\1\57\1\15"+
    "\2\0\1\50\1\54\1\13\1\61\1\62\1\12\1\46\1\67\1\47"+
    "\1\3\1\7\1\74\7\4\2\2\1\72\1\70\1\52\1\51\1\53"+
    "\1\71\1\0\4\5\1\100\1\77\5\1\1\76\10\1\1\75\5\1"+
    "\1\63\1\14\1\64\1\56\1\73\1\0\1\16\1\22\1\26\1\33"+
    "\1\24\1\34\1\40\1\30\1\32\1\1\1\25\1\35\1\36\1\31"+
    "\1\21\1\44\1\1\1\23\1\27\1\20\1\17\1\45\1\42\1\37"+
    "\1\43\1\41\1\65\1\55\1\66\1\60\6\0\1\11\u1fa2\0\1\11"+
    "\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\2\1"+
    "\17\2\2\6\1\7\2\10\3\11\1\12\1\11\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\1\1\3\1\0\1\25\1\0\1\26\1\25"+
    "\1\26\1\0\1\5\1\0\1\7\1\0\1\27\3\0"+
    "\17\2\2\30\6\2\1\31\1\32\1\10\1\12\1\33"+
    "\1\0\1\34\1\35\1\36\1\0\1\37\1\35\1\0"+
    "\30\2\1\40\1\41\1\40\1\41\1\42\1\34\1\43"+
    "\1\44\1\45\1\5\16\2\1\46\1\47\1\46\1\50"+
    "\1\51\1\50\1\51\1\0\7\2\1\52\1\53\1\0"+
    "\1\54\1\53\1\34\2\2\1\55\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u01c7\0\u06db\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\202\0\u0820\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69"+
    "\0\101\0\u0208\0\101\0\u0aaa\0\u0249\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\202\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\101\0\101\0\101"+
    "\0\101\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u11c6\0\101"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\101\0\101\0\101\0\u0a69\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\101\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\101\0\101\0\u2143\0\101\0\u2143\0\u2184\0\u21c5"+
    "\0\u2206\0\101\0\u2247";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\3\1\6\1\7"+
    "\1\6\1\0\1\10\1\11\1\2\1\12\1\13\1\14"+
    "\1\15\1\3\1\16\1\17\1\20\1\3\1\21\1\22"+
    "\2\3\1\23\1\24\1\25\1\26\2\3\1\27\1\3"+
    "\1\30\2\3\1\31\1\32\1\33\1\10\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\4\3\102\0\2\3\1\0\2\3\10\0"+
    "\30\3\25\0\6\3\2\0\1\4\1\60\1\4\12\0"+
    "\1\61\4\0\1\62\10\0\1\63\36\0\1\4\1\64"+
    "\1\65\1\0\1\62\2\0\1\66\1\0\1\66\67\0"+
    "\1\66\12\0\1\6\1\0\1\6\77\0\1\67\2\0"+
    "\1\70\36\0\1\71\100\0\1\71\27\0\13\72\1\73"+
    "\1\74\64\72\14\75\1\76\1\73\63\75\1\0\2\3"+
    "\1\0\2\3\10\0\1\3\1\77\26\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\13\3\1\100\14\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\25\3"+
    "\1\101\2\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\5\3\1\102\22\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\6\3\1\103\21\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\13\3\1\104\3\3"+
    "\1\105\1\3\1\106\6\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\1\105\2\3\1\107\6\3\1\110"+
    "\15\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\2\3\1\111\7\3\1\112\1\3\1\113\7\3\1\114"+
    "\3\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\13\3\1\115\2\3\1\116\11\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\3\3\1\117\2\3\1\120"+
    "\21\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\3\3\1\121\13\3\1\122\10\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\3\3\1\123\24\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\3\3\1\77"+
    "\24\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\12\3\1\124\15\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\3\3\1\125\24\3\25\0\6\3\46\0"+
    "\1\126\2\0\1\71\76\0\1\126\1\0\1\71\1\0"+
    "\1\127\76\0\1\130\100\0\1\130\1\41\77\0\1\130"+
    "\1\0\1\41\76\0\1\71\2\0\1\131\75\0\1\71"+
    "\3\0\1\131\25\0\1\4\1\60\1\132\12\0\1\61"+
    "\4\0\1\62\10\0\1\63\1\0\1\133\34\0\1\132"+
    "\1\64\1\65\1\0\1\62\2\0\1\134\1\0\1\134"+
    "\67\0\1\134\41\0\1\135\45\0\1\136\1\0\1\136"+
    "\42\0\1\137\24\0\1\136\41\0\1\140\141\0\1\141"+
    "\100\0\1\140\4\0\1\66\1\0\1\66\17\0\1\62"+
    "\47\0\1\66\3\0\1\62\10\67\2\0\67\67\12\70"+
    "\1\142\66\70\10\72\2\0\67\72\10\75\2\0\67\75"+
    "\1\0\2\3\1\0\2\3\10\0\2\3\1\143\25\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\11\3"+
    "\1\144\2\3\1\145\13\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\26\3\1\146\1\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\6\3\1\147\21\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\2\3"+
    "\1\150\17\3\1\151\5\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\1\3\1\152\26\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\11\3\1\153\16\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\2\3"+
    "\1\154\25\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\13\3\1\155\14\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\1\121\27\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\1\156\4\3\1\157\22\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\3\3"+
    "\1\160\24\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\22\3\1\161\1\162\4\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\14\3\1\163\13\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\2\3\1\116"+
    "\25\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\1\3\1\164\26\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\16\3\1\165\11\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\5\3\1\116\22\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\3\3\1\166"+
    "\24\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\13\3\1\167\14\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\14\3\1\170\13\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\14\3\1\171\2\3\1\172"+
    "\10\3\25\0\6\3\2\0\1\4\1\60\1\132\12\0"+
    "\1\173\4\0\1\62\10\0\1\174\36\0\1\132\1\175"+
    "\1\176\1\0\1\62\2\0\1\177\1\0\2\177\10\0"+
    "\1\177\3\0\1\177\1\0\1\177\1\0\1\177\4\0"+
    "\2\177\37\0\1\177\2\0\2\177\2\0\1\200\1\0"+
    "\1\200\17\0\1\62\7\0\1\201\1\202\36\0\1\200"+
    "\1\0\1\202\1\201\1\62\35\0\1\203\45\0\1\136"+
    "\1\0\1\136\67\0\1\136\102\0\1\203\2\0\7\70"+
    "\1\204\2\70\1\142\66\70\1\0\2\3\1\0\2\3"+
    "\10\0\3\3\1\116\24\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\14\3\1\205\13\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\3\3\1\206\24\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\6\3"+
    "\1\207\21\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\1\210\27\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\1\3\1\211\26\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\14\3\1\212\13\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\20\3\1\116"+
    "\7\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\6\3\1\116\21\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\6\3\1\211\21\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\2\3\1\213\6\3\1\115"+
    "\16\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\2\3\1\214\25\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\1\3\1\215\26\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\5\3\1\115\22\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\13\3\1\216"+
    "\14\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\6\3\1\217\21\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\2\3\1\220\25\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\4\3\1\170\23\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\1\221\27\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\1\115"+
    "\27\3\25\0\6\3\1\0\2\3\1\0\2\3\10\0"+
    "\22\3\1\116\5\3\25\0\6\3\1\0\2\3\1\0"+
    "\2\3\10\0\17\3\1\153\10\3\25\0\6\3\1\0"+
    "\2\3\1\0\2\3\10\0\15\3\1\116\12\3\25\0"+
    "\6\3\1\0\2\3\1\0\2\3\10\0\1\222\27\3"+
    "\25\0\6\3\35\0\1\223\100\0\1\224\141\0\1\225"+
    "\100\0\1\224\4\0\1\177\1\0\2\177\10\0\1\177"+
    "\1\226\2\0\1\177\1\0\1\177\1\0\1\177\4\0"+
    "\2\177\1\227\36\0\1\177\1\230\1\231\2\177\2\0"+
    "\1\200\1\232\1\200\17\0\1\62\7\0\1\201\1\202"+
    "\36\0\1\200\1\0\1\202\1\201\1\62\1\0\2\3"+
    "\1\0\2\3\10\0\22\3\1\161\5\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\13\3\1\116\14\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\15\3"+
    "\1\233\12\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\7\3\1\116\20\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\5\3\1\206\22\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\11\3\1\234\16\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\14\3"+
    "\1\235\13\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\14\3\1\236\13\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\10\3\1\115\17\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\6\3\1\171\21\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\3\3"+
    "\1\237\24\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\10\3\1\240\17\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\1\3\1\241\26\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\2\3\1\124\25\3"+
    "\25\0\6\3\35\0\1\242\141\0\1\242\37\0\1\243"+
    "\40\0\1\244\37\0\1\245\141\0\1\246\100\0\1\245"+
    "\4\0\1\247\1\0\1\247\67\0\1\247\5\0\2\3"+
    "\1\0\2\3\10\0\6\3\1\237\21\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\2\3\1\250\25\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\13\3"+
    "\1\251\14\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\10\3\1\116\17\3\25\0\6\3\1\0\2\3"+
    "\1\0\2\3\10\0\16\3\1\116\11\3\25\0\6\3"+
    "\1\0\2\3\1\0\2\3\10\0\12\3\1\116\15\3"+
    "\25\0\6\3\1\0\2\3\1\0\2\3\10\0\17\3"+
    "\1\115\10\3\25\0\6\3\76\0\1\252\4\0\1\253"+
    "\1\0\1\253\27\0\1\201\1\202\36\0\1\253\1\0"+
    "\1\202\1\201\2\0\2\3\1\0\2\3\10\0\6\3"+
    "\1\121\21\3\25\0\6\3\1\0\2\3\1\0\2\3"+
    "\10\0\1\3\1\153\26\3\25\0\6\3\2\0\1\253"+
    "\1\232\1\253\27\0\1\201\1\202\36\0\1\253\1\0"+
    "\1\202\1\201\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\13\11\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\11\1\0\1\11\3\0"+
    "\27\1\4\11\1\1\1\0\3\1\1\0\1\11\1\1"+
    "\1\0\36\1\3\11\20\1\1\11\5\1\1\0\7\1"+
    "\2\11\1\0\1\11\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int GetLine() { return yyline + 1; }
    // ...

    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 46: break;
          case 2: 
            { lexeme=yytext(); return Identificador;
            }
          case 47: break;
          case 3: 
            { lexeme=yytext(); return Int;
            }
          case 48: break;
          case 4: 
            { lexeme=yytext(); return Punto;
            }
          case 49: break;
          case 5: 
            { /*Ignore*/
            }
          case 50: break;
          case 6: 
            { lexeme=yytext(); return OperadorAritmetico;
            }
          case 51: break;
          case 7: 
            { lexeme=yytext(); return OperadorAsignacion;
            }
          case 52: break;
          case 8: 
            { lexeme=yytext(); return OperadorComparacion;
            }
          case 53: break;
          case 9: 
            { lexeme=yytext(); return OperadorDeBit;
            }
          case 54: break;
          case 10: 
            { lexeme=yytext(); return OperadorLogico;
            }
          case 55: break;
          case 11: 
            { lexeme=yytext(); return ParentesisA;
            }
          case 56: break;
          case 12: 
            { lexeme=yytext(); return ParentesisC;
            }
          case 57: break;
          case 13: 
            { lexeme=yytext(); return ParentesisCuadradoA;
            }
          case 58: break;
          case 14: 
            { lexeme=yytext(); return ParentesisCuadradoC;
            }
          case 59: break;
          case 15: 
            { lexeme=yytext(); return LlaveA;
            }
          case 60: break;
          case 16: 
            { lexeme=yytext(); return LlaveC;
            }
          case 61: break;
          case 17: 
            { lexeme=yytext(); return Coma;
            }
          case 62: break;
          case 18: 
            { lexeme=yytext(); return PuntoComa;
            }
          case 63: break;
          case 19: 
            { lexeme=yytext(); return Interrogacion;
            }
          case 64: break;
          case 20: 
            { lexeme=yytext(); return DosPuntos;
            }
          case 65: break;
          case 21: 
            { lexeme=yytext(); return IntU;
            }
          case 66: break;
          case 22: 
            { lexeme=yytext(); return IntL;
            }
          case 67: break;
          case 23: 
            { lexeme=yytext(); return Literal;
            }
          case 68: break;
          case 24: 
            { lexeme=yytext(); return Reservada;
            }
          case 69: break;
          case 25: 
            { lexeme=yytext(); return OperadorIncremento;
            }
          case 70: break;
          case 26: 
            { lexeme=yytext(); return Flecha;
            }
          case 71: break;
          case 27: 
            { lexeme=yytext(); return Octal;
            }
          case 72: break;
          case 28: 
            { lexeme=yytext(); return Double;
            }
          case 73: break;
          case 29: 
            { lexeme=yytext(); return IntUL;
            }
          case 74: break;
          case 30: 
            { lexeme=yytext(); return PuntoFlotante;
            }
          case 75: break;
          case 31: 
            { lexeme=yytext(); return IntLL;
            }
          case 76: break;
          case 32: 
            { lexeme=yytext(); return OctalU;
            }
          case 77: break;
          case 33: 
            { lexeme=yytext(); return OctalL;
            }
          case 78: break;
          case 34: 
            { lexeme=yytext(); return Hexadecimal;
            }
          case 79: break;
          case 35: 
            { lexeme=yytext(); return Float;
            }
          case 80: break;
          case 36: 
            { lexeme=yytext(); return DoubleL;
            }
          case 81: break;
          case 37: 
            { lexeme=yytext(); return IntULL;
            }
          case 82: break;
          case 38: 
            { lexeme=yytext(); return OctalUL;
            }
          case 83: break;
          case 39: 
            { lexeme=yytext(); return OctalLL;
            }
          case 84: break;
          case 40: 
            { lexeme=yytext(); return HexadecimalU;
            }
          case 85: break;
          case 41: 
            { lexeme=yytext(); return HexadecimalL;
            }
          case 86: break;
          case 42: 
            { lexeme=yytext(); return OctalULL;
            }
          case 87: break;
          case 43: 
            { lexeme=yytext(); return HexadecimalUL;
            }
          case 88: break;
          case 44: 
            { lexeme=yytext(); return HexadecimalLL;
            }
          case 89: break;
          case 45: 
            { lexeme=yytext(); return HexadecimalULL;
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
