package compi;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Break, Case, Char, Const, Continue, Default, Do, Else, For,
    If, Int, Integer, Long, Return, Short, Switch, Void, While, OperadorSuma, 
    OperadorResta, OperadorMulti, OperadorDiv, OperadorMod, OperadorComparacion,
    OperadorMenor, OperadorMayor, OperadorMayorIgual, OperadorMenorIgual,
    OperadorDiferencia, OperadorNegacion, OperadorAnd, OperadorOr, OperadorAsignacion,
    OperadorAsignacionSuma, OperadorAsignacionResta, OperadorAsignacionMul,
    OperadorAsignacionDiv, OperadorIncremento, OperadorDecremento,
    ParentesisA, ParentesisC, LlaveA, LlaveC, Coma, PuntoComa, Punto, LiteralChar,
    LiteralString, Identificador, Main

non terminal FUNCION, SENTENCIA, PARAMETROS, OPERADOR_ARITMETICO2, OPERADOR_ARITMETICO1, 
    DATO_PREFIX, OPERADOR_BOOL, OPERADOR_OR_AND, OPERADOR_ASIG, TIPO_DATO, DATO,
    DECLARACION_LIST, DECLARACION, OPERACION1, OPERACION2, FACTOR, EXPRESION, IF, IF_ELSE,
    WHILE, DO_WHILE, SENTENCIA_BOOLEANA;

start with FUNCION;

FUNCION ::= 
    TIPO_DATO Identificador ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC |
    Void Identificador ParentesisA PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA EXPRESION |
    EXPRESION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA SWITCH
    SWITCH |
    SENTENCIA FOR |
    FOR
;
PARAMETROS ::= 
    TIPO_DATO Identificador |
    PARAMETROS Coma TIPO_DATO Identificador |
;
OPERADOR_ARITMETICO2 ::= 
    OperadorMulti |
    OperadorDiv | 
    OperadorMod
;
OPERADOR_ARITMETICO1 ::= 
    OperadorSuma | 
    OperadorResta 
;
DATO_PREFIX ::= 
    OperadorSuma | 
    OperadorResta |
    OperadorNegacion |
;
OPERADOR_BOOL ::= 
    OperadorComparacion |
    OperadorMenor | 
    OperadorMayor | 
    OperadorMayorIgual | 
    OperadorMenorIgual |
    OperadorDiferencia  
;
OPERADOR_OR_AND ::= 
    OperadorOr |
    OperadorAnd 
;
OPERADOR_ASIG ::= 
    OperadorAsignacion |
    OperadorAsignacionSuma | 
    OperadorAsignacionResta | 
    OperadorAsignacionMul |
    OperadorAsignacionDiv 
;
TIPO_DATO ::= 
    Char |
    Integer | 
    Long | 
    Short |
    Short Integer | 
    Long Integer 
;
DATO ::= 
    LiteralChar |
    Int |
    Identificador
;
DECLARACION_LIST ::= 
    Identificador |
    DECLARACION_LIST Coma Identificador |
    Identificador OperadorAsignacion OPERACION1 |
    DECLARACION_LIST Coma Identificador OperadorAsignacion OPERACION1
;
DECLARACION ::= 
    TIPO_DATO DECLARACION_LIST PuntoComa |
    TIPO_DATO Const DECLARACION_LIST PuntoComa |  
    Const TIPO_DATO DECLARACION_LIST PuntoComa
;
OPERACION1 ::= 
    OPERACION1 OPERADOR_ARITMETICO1 OPERACION1 | 
    OPERACION2
;
OPERACION2 ::= 
    OPERACION2 OPERADOR_ARITMETICO2 OPERACION2 | 
    FACTOR
;
FACTOR ::= 
    ParentesisA OPERACION1 ParentesisC | 
    DATO_PREFIX DATO |
    OperadorDecremento Identificador |
    OperadorIncremento Identificador |
    Identificador OperadorDecremento |
    Identificador OperadorIncremento 
;
EXPRESION ::= 
    Identificador OPERADOR_ASIG OPERACION1 PuntoComa |
    OPERACION1 PuntoComa
    
;
IF ::= If ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA SENTENCIA LlaveC
;
SENTENCIA_BOOLEANA ::= 
    OPERACION1 OPERADOR_BOOL OPERACION1 |
    SENTENCIA_BOOLEANA OPERADOR_OR_AND OPERACION1 OPERADOR_BOOL OPERACION1
;
IF_ELSE ::= If ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC
;
WHILE ::= While ParentesisA SENTENCIA_BOOLEANA ParentesisC LlaveA SENTENCIA LlaveC
;
DO_WHILE ::= Do LlaveA SENTENCIA LlaveC While ParentesisA SENTENCIA_BOOLEANA ParentesisC PuntoComa
;
